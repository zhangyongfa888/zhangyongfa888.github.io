<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WE ARE YOUNG</title>
  
  <subtitle>So let&#39;s set the world on fire</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangyongfa888.site/"/>
  <updated>2020-10-13T05:40:20.526Z</updated>
  <id>http://zhangyongfa888.site/</id>
  
  <author>
    <name>zhangyongfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号斗图</title>
    <link href="http://zhangyongfa888.site/2020/10/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%97%E5%9B%BE/"/>
    <id>http://zhangyongfa888.site/2020/10/13/微信公众号斗图/</id>
    <published>2020-10-13T05:26:00.000Z</published>
    <updated>2020-10-13T05:40:20.526Z</updated>
    
    <content type="html"><![CDATA[<p>这就比较好玩了</p><p>有个公众号不知道 拿来斗图吧、</p><h4 id="第一步、微信配置接受消息的服务地址"><a href="#第一步、微信配置接受消息的服务地址" class="headerlink" title="第一步、微信配置接受消息的服务地址"></a>第一步、微信配置接受消息的服务地址</h4><p><a href="https://mp.weixin.qq.com/advanced/advanced?action=dev&amp;t=advanced/dev&amp;token=1886184966&amp;lang=zh_CN" target="_blank" rel="noopener">https://mp.weixin.qq.com/advanced/advanced?action=dev&amp;t=advanced/dev&amp;token=1886184966&amp;lang=zh_CN</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/16025669335934sgtg91c.png?imageslim" alt="服务器配置" title>                </div>                <div class="image-caption">服务器配置</div>            </figure><h4 id="第二步、服务器验证token"><a href="#第二步、服务器验证token" class="headerlink" title="第二步、服务器验证token"></a>第二步、服务器验证token</h4><pre><code>//检测token 每次修改后台配置的时候会用到function checkSignature(){$signature = $_GET[&quot;signature&quot;];$timestamp = $_GET[&quot;timestamp&quot;];$nonce = $_GET[&quot;nonce&quot;];$echostr = $_GET[&quot;echostr&quot;];$token = &quot;duoduo888&quot;;// 1、将token、timestamp、nonce三个参数进行字典序排序$tmpArr = array($nonce, $token, $timestamp);sort($tmpArr, SORT_STRING);// 2、将三个参数字符串拼接成一个字符串进行sha1加密$str = implode($tmpArr);$sign = sha1($str);// 3、开发者获得加密后的字符串可与signature对比，标识该请求来源于微信if ($sign == $signature) {    return $echostr;}return &quot;&quot;;} //点击后台配置走这里 if ($_GET[&quot;echostr&quot;]) {    return checkSignature();}</code></pre><h4 id="第三步、拿到消息处理数据"><a href="#第三步、拿到消息处理数据" class="headerlink" title="第三步、拿到消息处理数据"></a>第三步、拿到消息处理数据</h4><pre><code>include_once &quot;XMLParse.php&quot;;include_once &quot;simple_html_dom.php&quot;;include_once &quot;WXBizMsgCrypt.php&quot;;$postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];$msg = &apos;&apos;;$pc = new WXBizMsgCrypt(&quot;duoduo888&quot;,     &quot;EDOO5bhPnGcpHU3Zt6vH42XWIYqhhlbF7E&quot;, &quot;wx8b98ce915a6e3aa8&quot;);//微信调取该接口时候携带的参数 demo中的解密方法 得到msg$errCode = $pc-&gt;decryptMsg($_GET[&quot;msg_signature&quot;], $_GET[&quot;timestamp&quot;], $_GET[&quot;nonce&quot;], $postStr, $msg);//解出msg的内容$xml_tree = new DOMDocument();$xml_tree-&gt;loadXML($msg);$fromUser = $xml_tree-&gt;getElementsByTagName(&apos;FromUserName&apos;)-&gt;item(0)-&gt;nodeValue;$toUser = $xml_tree-&gt;getElementsByTagName(&apos;ToUserName&apos;)-&gt;item(0)-&gt;nodeValue;$createTime = $xml_tree-&gt;getElementsByTagName(&apos;CreateTime&apos;)-&gt;item(0)-&gt;nodeValue;$msgType = $xml_tree-&gt;getElementsByTagName(&apos;MsgType&apos;)-&gt;item(0)-&gt;nodeValue;$content = $xml_tree-&gt;getElementsByTagName(&apos;Content&apos;)-&gt;item(0)-&gt;nodeValue;$msgId = $xml_tree-&gt;getElementsByTagName(&apos;MsgId&apos;)-&gt;item(0)-&gt;nodeValue;$time = time();$access_token = &quot;&quot;;$textTpl = &quot;&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;  &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;  &lt;CreateTime&gt;%s&lt;/CreateTime&gt;  &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;  &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;&lt;/xml&gt;&quot;;$imgTpl = &quot;&lt;xml&gt;  &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;  &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt; &lt;CreateTime&gt;%s&lt;/CreateTime&gt;  &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;  &lt;Image&gt;    &lt;MediaId&gt;&lt;![CDATA[%s]]&gt;&lt;/MediaId&gt;&lt;/Image&gt;&lt;/xml&gt;&quot;;if ($msgType == &quot;text&quot;) {if ($content == &quot;【收到不支持的消息类型，暂无法显示】&quot;) {//自定义表情    $resultStr = sprintf($textTpl, $fromUser, $toUser, $time, &quot;text&quot;, &quot;我看不懂这些&quot; . $msgType);} else if (substr($content, 0, 1) == &quot;#&quot;) {//斗图    $content = substr($content, 1, strlen($content));    //搜一张图片    $searchImg = &quot;http://www.adoutu.com/search?keyword=&quot; . urlencode($content);    //爬虫爬出来一张图片    $html = new simple_html_dom();    $html-&gt;load(file_get_contents($searchImg));    $rnd = rand(0, 15);    $ret = $html-&gt;find(&quot;.col-sm-3 img&quot;, $rnd);    //保存到本地    $path = getimg($ret-&gt;src, $rnd);    //获取token todo 存本地    $result = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx8b98ce915a6e3aa8&amp;secret=6fc27aee4dbfff2f3413c6342exxxxx&quot;);    $access_token = json_decode($result, true)[&quot;access_token&quot;];    $file_info = array(        &apos;filename&apos; =&gt; $path,  //图片相对于网站根目录的路径    );    //上传文件到临时素材    $r = add_material($file_info, $access_token);    if ($r != false) {        $arr = json_decode($r, true);        $mediaId = $arr[&quot;media_id&quot;];//获取到素材id        $resultStr = sprintf($imgTpl, $fromUser, $toUser, $time, &quot;image&quot;, $mediaId);//封装图片消息格式    } else {        //素材获取失败的情况 调用茉莉机器人        $url = &quot;http://i.itpk.cn/api.php?question=$content&amp;limit=10&amp;api_key=47c1ebe1ff89ba88f6ed1cbad0bdc314&amp;api_secret=7kpv8of4zap3&quot;;        $contentStr = file_get_contents($url);        $resultStr = sprintf($textTpl, $fromUser, $toUser, $time, &quot;text&quot;, $contentStr);    }} else {    //调用茉莉机器人    $url = &quot;http://i.itpk.cn/api.php?question=$content&amp;limit=10&amp;api_key=47c1ebe1ff89ba88f6ed1cxxxxxdc314&amp;api_secret=7kpv8ofxxxxp3&quot;;    $contentStr = file_get_contents($url);    //保存下用户 给与提示    $fp2 = file_get_contents(&quot;D:\Wnmp\html\weixin_gongzhonghao\\user.txt&quot;);    if (strpos($fp2, $fromUser) !== 0) {        $contentStr .= &quot;\n---加#前缀 能斗图哦~&quot;;    }    $resultStr = sprintf($textTpl, $fromUser, $toUser, $time, &quot;text&quot;, $contentStr);//封装文字消息格式}} else {//其他 接受到图片位置等消息的时候暂不处理$resultStr = sprintf($textTpl, $fromUser, $toUser, $time, &quot;text&quot;, &quot;能发一点我能看懂的东西吗？&quot;);}//记录日志$requestInformation = date(&apos;Y-m-d h:i:s&apos;) . &quot;\n&quot; . $_SERVER[&apos;REMOTE_ADDR&apos;] . &apos;, &apos; . $_SERVER[&apos;HTTP_USER_AGENT&apos;] .&apos;, http://&apos; . $_SERVER[&apos;HTTP_HOST&apos;] . htmlentities($_SERVER[&apos;PHP_SELF&apos;]) . &apos;?&apos; . $_SERVER[&apos;QUERY_STRING&apos;] . &quot;\n&quot; .&quot;发送者:&quot; . $fromUser . &quot;\n&quot; .&quot;时间:&quot; . $createTime . &quot;\n&quot; .&quot;消息类型:&quot; . $msgType . &quot;\n&quot; .&quot;收到内容:&quot; . $content . &quot;\n&quot; .&quot;回复内容---&gt;&quot; . &quot;$contentStr\n&quot; .&quot;-----------------------------------------------------------------------------------------------------------------------\n&quot;;writeFile(&quot;D:\Wnmp\html\weixin_gongzhonghao\a.txt&quot;, $requestInformation, &apos;a&apos;);echo $resultStr;//打印消息 即发送给用户</code></pre><h4 id="第四步、玩耍"><a href="#第四步、玩耍" class="headerlink" title="第四步、玩耍"></a>第四步、玩耍</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1602567405422bmjea71q.png?imageslim" alt="玩耍" title>                </div>                <div class="image-caption">玩耍</div>            </figure><h4 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h4> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1576830573345lwus008f.png?imageslim" alt="关注下体验体验" title>                </div>                <div class="image-caption">关注下体验体验</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这就比较好玩了&lt;/p&gt;
&lt;p&gt;有个公众号不知道 拿来斗图吧、&lt;/p&gt;
&lt;h4 id=&quot;第一步、微信配置接受消息的服务地址&quot;&gt;&lt;a href=&quot;#第一步、微信配置接受消息的服务地址&quot; class=&quot;headerlink&quot; title=&quot;第一步、微信配置接受消息的服务地址&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="robot" scheme="http://zhangyongfa888.site/categories/robot/"/>
    
    
      <category term="公众号" scheme="http://zhangyongfa888.site/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="php" scheme="http://zhangyongfa888.site/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Flutter搭建界面</title>
    <link href="http://zhangyongfa888.site/2020/10/13/Flutter%E6%90%AD%E5%BB%BA%E7%95%8C%E9%9D%A2/"/>
    <id>http://zhangyongfa888.site/2020/10/13/Flutter搭建界面/</id>
    <published>2020-10-13T05:06:00.000Z</published>
    <updated>2020-10-13T05:25:04.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flutter搭建OA首页"><a href="#flutter搭建OA首页" class="headerlink" title="flutter搭建OA首页"></a>flutter搭建OA首页</h3><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><h5 id="main-dart主要代码"><a href="#main-dart主要代码" class="headerlink" title="main.dart主要代码"></a>main.dart主要代码</h5><pre><code>return   Scaffold(  appBar: AppBar(    elevation: 0,    title: Text(title),    centerTitle: true,    actions: actions,  ),  body: PageView(    onPageChanged: pageChange,    children: bodys,    controller: this._pageController,  ),  bottomNavigationBar: BottomNavigationBar(    type: BottomNavigationBarType.fixed,    currentIndex: _currentIndexTab,    items: [      BottomNavigationBarItem(          icon: Icon(            Icons.home,          ),          title: new Text(            titles[0],          )),      BottomNavigationBarItem(          icon: Icon(            Icons.business,          ),          title: new Text(            titles[1],          )),      BottomNavigationBarItem(          icon: Icon(            Icons.book,          ),          title: new Text(            titles[2],          )),      BottomNavigationBarItem(          icon: Icon(            Icons.mood,          ),          title: new Text(            titles[3],          )),    ],    onTap: (int i) {      setState(() {        _currentIndexTab = i;        title = titles[i];        this._pageController.jumpToPage(i);      });    },  ),);</code></pre><p>  主页包括可以滑动的四个界面</p><pre><code> List&lt;String&gt; titles = [&quot;主页&quot;, &quot;审批&quot;, &quot;通讯录&quot;, &quot;我的&quot;];List&lt;Widget&gt; bodys = [HomeView(), BusinessView(), ContactsView(), MeView()];</code></pre><h5 id="HomeView-dart"><a href="#HomeView-dart" class="headerlink" title="HomeView.dart"></a>HomeView.dart</h5><h6 id="顶部banner"><a href="#顶部banner" class="headerlink" title="顶部banner"></a>顶部banner</h6><pre><code>     Container containerSwiper = Container(  height: 180,  padding: EdgeInsets.fromLTRB(10, 0, 10, 0),  child: new Swiper(    itemBuilder: (BuildContext context, int index) {      List&lt;Image&gt; img = [        Image.asset(          &quot;assets/images/icon_login_bg.png&quot;,          fit: BoxFit.fill,        ),        Image.network(          &quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1592302478460&amp;di=80aefc26821a61e07775f0434316a9dd&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.588ku.com%2Fback_pic%2F03%2F76%2F77%2F9057befb759e5ac.jpg&quot;,          fit: BoxFit.fill,        ),        Image.network(          &quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1802360540,2576557860&amp;fm=26&amp;gp=0.jpg&quot;,          fit: BoxFit.fill,        )      ];      return img[index];    },    itemCount: 3,    pagination: new SwiperPagination(),  ),);     </code></pre><h6 id="闪烁的公共消息"><a href="#闪烁的公共消息" class="headerlink" title="闪烁的公共消息"></a>闪烁的公共消息</h6><pre><code>     Container tips = new Container(  color: Colors.white,  child: Row(    children: [      new Padding(        padding: EdgeInsets.all(10),        child: new Image.asset(          &quot;assets/images/icon_notification_home.png&quot;,          width: 28,          height: 28,        ),      ),      new Expanded(          child: AnimatedTips(        child: Text(&quot;00&quot;),        title: tipString,        animation: animation,      )),      new Padding(        padding: EdgeInsets.all(15),        child: new Image.asset(          &quot;assets/images/icon_more_me.png&quot;,          width: 10,          height: 20,        ),      )    ],  ),);</code></pre><h6 id="操作的面板"><a href="#操作的面板" class="headerlink" title="操作的面板"></a>操作的面板</h6><pre><code>GridView gridView = GridView.extent(  maxCrossAxisExtent: MediaQuery.of(context).size.width / 3,  mainAxisSpacing: 0.05,  shrinkWrap: true,  crossAxisSpacing: 0.05,  children: [    HomeCategoryItem(&quot;加班打444卡&quot;, &quot;assets/images/icon_over_time.png&quot;),    HomeCategoryItem(&quot;考勤打卡&quot;, &quot;assets/images/icon_checking_in.png&quot;),    HomeCategoryItem(&quot;我的日志&quot;, &quot;assets/images/icon_my_log.png&quot;),    HomeCategoryItem(&quot;我的绩效&quot;, &quot;assets/images/icon_my_performance.png&quot;),    HomeCategoryItem(&quot;我的薪资&quot;, &quot;assets/images/icon_my_salary.png&quot;),    HomeCategoryItem(&quot;我的代办&quot;, &quot;assets/images/icon_my_todo.png&quot;),  ],);</code></pre><h6 id="最后垂直排列"><a href="#最后垂直排列" class="headerlink" title="最后垂直排列"></a>最后垂直排列</h6><pre><code> return Column(  children: [s, spc, tips, spc, gridView],);</code></pre><h6 id="HomeCategoryItem"><a href="#HomeCategoryItem" class="headerlink" title="HomeCategoryItem"></a>HomeCategoryItem</h6><pre><code>   class HomeCategoryItem extends StatelessWidget {   final String name;   final String icon;      HomeCategoryItem(this.name, this.icon);  void press(BuildContext context) async {Dio dio = Dio();Response response = await dio.get(&quot;http://www.baidu.com&quot;);Navigator.of(context)    .push(new MaterialPageRoute(builder: (BuildContext context) {  return new MyWebView(response.data.toString());}));print(&quot;------------&gt;&quot; + response.data.toString());  }  @override  Widget build(BuildContext context) {double size = MediaQuery.of(context).size.width;Container item = new Container(  height: size / 3 - 6,  decoration: new BoxDecoration(      color: Colors.white,      border: new Border.all(color: Colors.grey, width: 0.05)),  width: size / 3 - 6,  child: FlatButton(    onPressed: () =&gt; {press(context)},    child: new Column(      mainAxisAlignment: MainAxisAlignment.center,      children: [        new Image.asset(          icon,          width: 40,          height: 40,        ),        Container(          margin: EdgeInsets.fromLTRB(0, 10, 0, 0),          child: new Text(            name,            style: TextStyle(color: Colors.black, fontSize: 14),          ),        )      ],    ),  ),);return item;  }</code></pre><h5 id="BusinessView-dart"><a href="#BusinessView-dart" class="headerlink" title="BusinessView.dart"></a>BusinessView.dart</h5><h6 id="顶部切换的按钮"><a href="#顶部切换的按钮" class="headerlink" title="顶部切换的按钮"></a>顶部切换的按钮</h6><pre><code>  Container top = new Container(child: Row(  mainAxisAlignment: MainAxisAlignment.center,  children: [    new BusinessCategoryItem(      icon: &quot;assets/images/icon_my_send_approve.png&quot;,      name: &quot;我审批的&quot;,    ),    new Container(      height: 60,      width: 0.7,      color: Color(0xffdedede),    ),    new BusinessCategoryItem(        name: &quot;我提交的&quot;, icon: &quot;assets/images/icon_receive_my_log.png&quot;),  ],),height: 120,margin: EdgeInsets.all(20),decoration: new BoxDecoration(    color: Colors.white,    borderRadius: BorderRadius.all(Radius.circular(10))));</code></pre><h6 id="可操作的面板"><a href="#可操作的面板" class="headerlink" title="可操作的面板"></a>可操作的面板</h6><pre><code>   List&lt;Model&gt; data = [  new Model(&quot;人事&quot;, [&quot;离职&quot;, &quot;调动&quot;]),  new Model(&quot;出勤&quot;, [&quot;请假&quot;, &quot;外出&quot;, &quot;出差&quot;, &quot;加班&quot;, &quot;转正&quot;]),  new Model(&quot;行政&quot;, [&quot;报销&quot;, &quot;付款&quot;, &quot;采购&quot;, &quot;通用&quot;]),  new Model(&quot;测试&quot;, [&quot;日程&quot;, &quot;需求&quot;, &quot;预估&quot;, &quot;开发&quot;, &quot;测试&quot;, &quot;交付&quot;]),];List&lt;BusinessCategoryView&gt; list = [];data.forEach((element) {  List&lt;BusinessCategoryItemContent&gt; childList = [];  element.data.forEach((element2) {    childList.add(new BusinessCategoryItemContent(element2));  });  list.add(new BusinessCategoryView(element.title, childList));});</code></pre><h6 id="BusinessCategoryItemContent："><a href="#BusinessCategoryItemContent：" class="headerlink" title="BusinessCategoryItemContent："></a>BusinessCategoryItemContent：</h6><pre><code> class BusinessCategoryView extends StatelessWidget { String title;  List&lt;BusinessCategoryItemContent&gt; items;BusinessCategoryView(this.title, this.items);  @override  Widget build(BuildContext context) {// TODO: implement builddouble size = MediaQuery.of(context).size.width;return Flex(  direction: Axis.vertical,  children: [    Align(      alignment: Alignment(-0.8, 1.0),      child: Text(title),    ),    GridView.extent(      physics: new NeverScrollableScrollPhysics(),      maxCrossAxisExtent: size / 4,      shrinkWrap: true,      padding: EdgeInsets.fromLTRB(20, 0, 20, 10),      children: items,    )  ],);  }</code></pre><h5 id="一些工具类"><a href="#一些工具类" class="headerlink" title="一些工具类"></a>一些工具类</h5><pre><code>   class MyIcons {  static const IconData message = IconData(0xe602, fontFamily:     &apos;myFont&apos;);  static const IconData me = IconData(0xe603, fontFamily: &apos;myFont&apos;);  static const IconData home = IconData(0xe604, fontFamily: &apos;myFont&apos;);} static void ToastCenter(String title) {    Fluttertoast.showToast(    msg: title,    toastLength: Toast.LENGTH_SHORT,    gravity: ToastGravity.CENTER,    timeInSecForIos: 1,    backgroundColor: Colors.black87,    textColor: Colors.white,    fontSize: 14.0);  }  static Color getRandomColor() {    return Color.fromARGB(255, Random.secure().nextInt(255),    Random.secure().nextInt(255), Random.secure().nextInt(255));  }</code></pre><h5 id="用到的库："><a href="#用到的库：" class="headerlink" title="用到的库："></a>用到的库：</h5><p>   <img src="http://res.zhangyongfa888.site/1602566528354c8n1zuo9.png?imageslim" alt="库"></p><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p>   稍后上传</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flutter搭建OA首页&quot;&gt;&lt;a href=&quot;#flutter搭建OA首页&quot; class=&quot;headerlink&quot; title=&quot;flutter搭建OA首页&quot;&gt;&lt;/a&gt;flutter搭建OA首页&lt;/h3&gt;&lt;h4 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; cla
      
    
    </summary>
    
      <category term="flutter" scheme="http://zhangyongfa888.site/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://zhangyongfa888.site/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>博客背景音乐问题追查</title>
    <link href="http://zhangyongfa888.site/2020/07/06/%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E9%97%AE%E9%A2%98%E8%BF%BD%E6%9F%A5/"/>
    <id>http://zhangyongfa888.site/2020/07/06/博客背景音乐问题追查/</id>
    <published>2020-07-06T06:57:00.000Z</published>
    <updated>2020-07-06T07:23:23.481Z</updated>
    
    <content type="html"><![CDATA[<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>每次进入文章都是固定的背景音乐</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><pre><code>是否开启toctoc: falsetoc:  list_number: true   music: [1459980094,29717271,30814948,863481092,485612576,31517407,424995317,38592976,427419509,1328382004,1305365717,25706282,416389005,490602642,26494530,1451141290,1434356520,1356367833,1395338980,1390519535,1379517878,1449871979,1441777485]  urls: [http://www.zhaixiaoou.com/]  urlsDesc: [zhaixiaoou-小锡兵鸥]</code></pre><p> 之前是写在配置中，在TOC(右侧级别分类中)显示播放器。</p><p> 排查过程中发现是由于<strong>ejs生成静态文件时候已经产生好随机数并给每一篇文章赋值好了播放地址。</strong></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p> 1.使用js动态生成iframe以及随机播放地址</p><p> 2.生成的iframe插入到对应的节点下</p><p> <img src="http://res.zhangyongfa888.site/1594018940424k6r2td27.png?imageslim" alt="music.ejs"></p><p> 在任何地方只要引入ejs就能够自动播放网易外链音乐了~</p><p> 现在改到了评论上方~</p><p> <img src="http://res.zhangyongfa888.site/1594019032010geoa5xao.png?imageslim" alt="位置"></p><hr><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://res.zhangyongfa888.site/RandomMusic.js&quot;&gt;&lt;/script&gt;</code></pre><p> 使用js,方便更改歌曲连接~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;存在的问题&quot;&gt;&lt;a href=&quot;#存在的问题&quot; class=&quot;headerlink&quot; title=&quot;存在的问题&quot;&gt;&lt;/a&gt;存在的问题&lt;/h4&gt;&lt;p&gt;每次进入文章都是固定的背景音乐&lt;/p&gt;
&lt;h4 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;h
      
    
    </summary>
    
      <category term="hexo" scheme="http://zhangyongfa888.site/categories/hexo/"/>
    
    
      <category term="blog" scheme="http://zhangyongfa888.site/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>酷q机器人实践</title>
    <link href="http://zhangyongfa888.site/2020/07/03/%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E8%B7%B5/"/>
    <id>http://zhangyongfa888.site/2020/07/03/酷q机器人实践/</id>
    <published>2020-07-03T07:32:00.000Z</published>
    <updated>2020-07-06T00:52:49.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="START"><a href="#START" class="headerlink" title="START"></a>START</h4><p><a href="https://cqp.cc/" target="_blank" rel="noopener">酷Q官方地址</a></p><h4 id="STEP1"><a href="#STEP1" class="headerlink" title="STEP1"></a>STEP1</h4><h5 id="选择合适的语言"><a href="#选择合适的语言" class="headerlink" title="选择合适的语言"></a>选择合适的语言</h5><p><a href="https://cqp.cc/t/15124" target="_blank" rel="noopener">官方sdk</a></p><p>根据自己熟悉的语言选择sdk</p><p><a href="https://cqp.cc/t/37318" target="_blank" rel="noopener"><strong>这里选择了java</strong></a></p><p>按照官方给的步骤走一遍</p><p>你会发现json解析失败。</p><p>可能原因就是官方从cpk包太旧 与开发的jar包不统一问题</p><p>解决办法 :<a href="https://github.com/WsureDev/warframe-bot" target="_blank" rel="noopener">参考这里</a></p><p>⇣⇣⇣</p><p><strong>需要注意的是，部署过1.0版本的请手动把JCQ老版本的cpk和数据目录删了，因为老版本几乎是基于jcq-1.2.7，新版本基于jcq-1.3.1 -具体操作：</strong></p><p><strong>1.删除酷Q目录下app文件夹内jcq的cpk插件，并下载新版JCQ1.3.1放在此处</strong></p><p><strong>2.删除酷Q目录下data/app/org.meowy.cqp.jcq/和data/app/org.meowy.cqp.jcq/,然后回到酷Q根目录把release解压出来的data目录丢进去覆盖</strong></p><p>在\酷Q Air\data\app\org.meowy.cqp.jcq\conf中新建文件 <strong>JCQ.cfg</strong></p><pre><code>[App]com.example.demo.status=1com.aye10032.broadcastbot.status=1</code></pre><h4 id="一切就绪后"><a href="#一切就绪后" class="headerlink" title="一切就绪后"></a>一切就绪后</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15939958043752hbghlmq.png?imageslim" alt="代码片段" title>                </div>                <div class="image-caption">代码片段</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1593995840996a4tcyiek.png?imageslim" alt="qq机器人" title>                </div>                <div class="image-caption">qq机器人</div>            </figure><h4 id="使用的工具"><a href="#使用的工具" class="headerlink" title="使用的工具"></a>使用的工具</h4><pre><code>    &lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.meowy.cqp&lt;/groupId&gt;        &lt;artifactId&gt;jcq-coolq&lt;/artifactId&gt;        &lt;version&gt;1.3.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;        &lt;artifactId&gt;okhttp&lt;/artifactId&gt;        &lt;version&gt;3.14.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.json&lt;/groupId&gt;        &lt;artifactId&gt;json&lt;/artifactId&gt;        &lt;version&gt;20180813&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>其他工具<br><a href="https://zhangyongfa888.lanzous.com/b099b6upg" target="_blank" rel="noopener">https://zhangyongfa888.lanzous.com/b099b6upg</a> </p><p>密码:dzbm</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;START&quot;&gt;&lt;a href=&quot;#START&quot; class=&quot;headerlink&quot; title=&quot;START&quot;&gt;&lt;/a&gt;START&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://cqp.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;酷
      
    
    </summary>
    
      <category term="JAVA" scheme="http://zhangyongfa888.site/categories/JAVA/"/>
    
      <category term="robot" scheme="http://zhangyongfa888.site/categories/JAVA/robot/"/>
    
    
      <category term="AI" scheme="http://zhangyongfa888.site/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>flutter初探</title>
    <link href="http://zhangyongfa888.site/2020/06/18/flutter%E5%88%9D%E6%8E%A2/"/>
    <id>http://zhangyongfa888.site/2020/06/18/flutter初探/</id>
    <published>2020-06-18T01:20:00.000Z</published>
    <updated>2020-06-18T02:10:37.559Z</updated>
    
    <content type="html"><![CDATA[<h4 id="极速构建漂亮的原生应用"><a href="#极速构建漂亮的原生应用" class="headerlink" title="极速构建漂亮的原生应用"></a>极速构建漂亮的原生应用</h4><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p><h5 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h5><p>毫秒级的热重载，修改后，您的应用界面会立即更新。使用丰富的、完全可定制的widget在几分钟内构建原生界面。</p><h5 id="富有表现力和灵活的UI"><a href="#富有表现力和灵活的UI" class="headerlink" title="富有表现力和灵活的UI"></a>富有表现力和灵活的UI</h5><p>快速发布聚焦于原生体验的功能。分层的架构允许您完全自定义，从而实现难以置信的快速渲染和富有表现力、灵活的设计。</p><h5 id="原生性能"><a href="#原生性能" class="headerlink" title="原生性能"></a>原生性能</h5><p>Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1592444587893oanpqkgx.png?imageslim" alt="结构" title>                </div>                <div class="image-caption">结构</div>            </figure><p>android:android的工程目录</p><p>assets：自己创建的资源文件夹 在pubspec.yaml中添加下位置</p><p>ios：ios的工程目录</p><p>lib：flutter代码目录</p><p>pubspec.yaml：配置文件 常用的就是引用第三方库</p><pre><code>dependencies:  flutter:    sdk: flutter  cupertino_icons: ^0.1.3  http: &apos;&gt;=0.11.3+12&apos;  flutter_swiper: ^1.1.6  fluttertoast: ^3.0.3 assets:- assets/images/</code></pre><p>assets是创建的资源目录的路径。修改完配置文件要put get 一下完成同步</p><h4 id="demo文件"><a href="#demo文件" class="headerlink" title="demo文件"></a>demo文件</h4><p>main.dart<br>编写的入口文件 其中包括 入口代码</p><pre><code>void main() {  runApp(MyApp());}</code></pre><p>runApp需要的参数是一个    Widget</p><pre><code>void runApp(Widget app) {  WidgetsFlutterBinding.ensureInitialized()..scheduleAttachRootWidget(app)..scheduleWarmUpFrame();}</code></pre><p>widget可以理解为android中的View</p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>1.状态栏高度和颜色<br>颜色透明   </p><pre><code>SystemUiOverlayStyle systemUiOverlayStyle =    SystemUiOverlayStyle(statusBarColor: Colors.transparent);SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</code></pre><p>高度获取</p><pre><code>final double statusBarHeight = MediaQuery.of(context).padding.top;</code></pre><p>2.组合view排列方式</p><p>Column垂直排列</p><p>Row水平排列</p><p>Column/Row 继承自Flex</p><p>所以也可以使用flex 并配置 </p><pre><code>direction: Axis.vertical</code></pre><p>3.视图圆角</p><pre><code>Container(         height: 40,         width: 40,         decoration: new BoxDecoration(             color: bgColor,             borderRadius: BorderRadius.all(Radius.circular(10))),       ),</code></pre><p>  color在decoration中设置了就不能在Container中设置了</p><p>4.frame布局使用Stack</p><pre><code>Stack(      alignment: Alignment.center,      children: [        Container(          height: 40,          width: 40,          decoration: new BoxDecoration(              color: bgColor,              borderRadius: BorderRadius.all(Radius.circular(10))),        ),        Text(          title.substring(0, 1),          style: TextStyle(color: Colors.white, fontSize: 15),        ),      ],</code></pre><p>5.控件可点击包一层InkWell (onTap事件)或者FlatButton（onPress事件）</p><p>6.GridView设置包裹的高度防止滑动冲突</p><pre><code>shrinkWrap: true,</code></pre><p>7.高度太长设置可以滑动 包一层SingleChildScrollView</p><p>8.一些常量都在constants.dart里</p><h4 id="仿oa"><a href="#仿oa" class="headerlink" title="仿oa"></a>仿oa</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1592446175204xfjxh04x.png?imageslim" alt="首页" title>                </div>                <div class="image-caption">首页</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1592446205066mcwa2do9.png?imageslim" alt="第二页" title>                </div>                <div class="image-caption">第二页</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;极速构建漂亮的原生应用&quot;&gt;&lt;a href=&quot;#极速构建漂亮的原生应用&quot; class=&quot;headerlink&quot; title=&quot;极速构建漂亮的原生应用&quot;&gt;&lt;/a&gt;极速构建漂亮的原生应用&lt;/h4&gt;&lt;p&gt;Flutter是谷歌的移动UI框架，可以快速在iOS和Android
      
    
    </summary>
    
      <category term="Flutter" scheme="http://zhangyongfa888.site/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://zhangyongfa888.site/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>SWIFT传值</title>
    <link href="http://zhangyongfa888.site/2020/06/01/SWIFT%E4%BC%A0%E5%80%BC/"/>
    <id>http://zhangyongfa888.site/2020/06/01/SWIFT传值/</id>
    <published>2020-06-01T08:21:00.000Z</published>
    <updated>2020-06-01T08:39:30.388Z</updated>
    
    <content type="html"><![CDATA[<p>参考：swift–四种传值(代理、闭包、属性、通知)<br><a href="https://www.cnblogs.com/adampei-bobo/p/8954042.html" target="_blank" rel="noopener">https://www.cnblogs.com/adampei-bobo/p/8954042.html</a></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>场景：比如从A携带参数到B</p><p>如图B中需要获取前一页携带的参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1590999826040iz9lbu92.png?imageslim" alt="B页面" title>                </div>                <div class="image-caption">B页面</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1590999874776k619d3qf.png?imageslim" alt="A页面" title>                </div>                <div class="image-caption">A页面</div>            </figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>类型android的接口</p><p>例：<br>第一步:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15909999651305ud6bmlh.png?imageslim" alt="创建代理" title>                </div>                <div class="image-caption">创建代理</div>            </figure><p>第二步:在需要传值的地方传值</p><pre><code>MySecondViewController().CallBack(back: &quot;123&quot;)</code></pre><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>安卓中的广播</p><p>1.注册通知    </p><pre><code>NotificationCenter.default.addObserver(self, selector: #selector(endTopicAction(obj:)), name: NSNotification.Name.init(&quot;11&quot;), object: nil)</code></pre><p>2.添加收到通知后的事件</p><pre><code>@objc func endTopicAction(obj:Notification){      print(&quot;--------&quot;,obj.object!)}</code></pre><p>3.发送</p><pre><code>let  a = [[&quot;A&quot;:&quot;aaa&quot;],[&quot;B&quot;:&quot;bbb&quot;]]    NotificationCenter.default.post(name:     NSNotification.Name.EndTopicSuccessNoti, object: a)</code></pre><p>4.在注册页要注销</p><pre><code>deinit {    NotificationCenter.default.removeObserver(self)}</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><pre><code>func testClosure(res:()-&gt;()){    res()}func testClosure(arg1:String,res:()-&gt;()) {    res()}func testClosure(arg1:String,res:(String)-&gt;()) {    res(arg1)}func testClosure(arg1:String,res:(String,String)-&gt;()) {    res(arg1,&quot;111&quot;)}func testClosure(arg1:String,res:(String)-&gt;(Bool)) {    let b =   res(arg1)    print(&quot;test4 return :&quot;,b)//return false}func testClosure(arg1:String,res:(String,String)-&gt;(Bool,Bool)) {    let b = res(arg1,&quot;222&quot;)    print(&quot;test5 return :&quot;,b.0,b.1)//return true false}</code></pre><p>   测试样例</p><pre><code> testClosure(arg1: &quot;test1&quot;) { print(&quot;test1:无返回值&quot;) } //最后一个参数时候 可以尾随闭包 testClosure { } testClosure(){ } //不是尾随闭包 testClosure(res: { }) let block:(String,String)-&gt;() = {     res1 ,res2 in print(res1,res2) } testClosure(arg1: &quot;aa&quot;, res: block) testClosure(arg1: &quot;test2&quot;) { (result) in print(&quot;test2:&quot;,result) } testClosure(arg1: &quot;test3&quot;) { (res1, res2) in     print(&quot;test3:&quot;,res1,res2) } testClosure(arg1: &quot;test4&quot;) { (res3) -&gt; (Bool) in print(&quot;test4:&quot;,res3) return false } testClosure(arg1: &quot;test5&quot;) { (res4, res5) -&gt; (Bool, Bool) in print(&quot;test5:&quot;,res4,res5) return (true,false) } // //    test1:无返回值 //    test2: test2 //    test3: test3 111 //    test4: test4 //    test4 return : false//    test5: test5 222//    test5 return : true false //    print({&quot;1&quot; &quot;2&quot; in &quot;1&quot;+&quot;2&quot;})</code></pre><p>   类似block用法</p><pre><code> A页面let vc = DetailsViewController();vc.block = {    a1,a3 in    print(&quot;22222222222&quot;,a1,a3)}B页面（DetailsViewController） var block:((String,String)-&gt;())? block?(&quot;12&quot;,  &quot;we&quot;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：swift–四种传值(代理、闭包、属性、通知)&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/adampei-bobo/p/8954042.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cn
      
    
    </summary>
    
      <category term="swift" scheme="http://zhangyongfa888.site/categories/swift/"/>
    
    
      <category term="ios" scheme="http://zhangyongfa888.site/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>iOS初探</title>
    <link href="http://zhangyongfa888.site/2020/05/25/iOS%E5%88%9D%E6%8E%A2/"/>
    <id>http://zhangyongfa888.site/2020/05/25/iOS初探/</id>
    <published>2020-05-25T05:28:00.000Z</published>
    <updated>2020-06-01T08:40:31.659Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1590384477326ofi7yvyx.png?imageslim" alt="目录结构" title>                </div>                <div class="image-caption">目录结构</div>            </figure><p>项目里没有什么内容</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1590384556127fe4l9kc0.png?imageslim" alt="项目结构" title>                </div>                <div class="image-caption">项目结构</div>            </figure><p>从上到下依次是</p><h6 id="AppDelegate："><a href="#AppDelegate：" class="headerlink" title="AppDelegate："></a>AppDelegate：</h6><p>APP启动时基本上每一次的状态改变都会调用一些delegate中的方法来响应当前的状态，让我们可以对程序进行特定操作。</p><h5 id="willFinishLaunching"><a href="#willFinishLaunching" class="headerlink" title="willFinishLaunching"></a>willFinishLaunching</h5><p>willFinishLaunching：程序将要完成启动。只在程序启动时执行一次。launchOptions：存存储程序启动的原因。</p><ul><li><p>(BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {</p><p>  return YES;<br>  }</p><h5 id="didFinishLaunching"><a href="#didFinishLaunching" class="headerlink" title="didFinishLaunching"></a>didFinishLaunching</h5><p>didFinishLaunching：程序已经完成启动，将要显示界面了。只在程序启动时执行一次。launchOptions：存存储程序启动的原因。</p></li></ul><p>didFinishLaunching是在app显示界面给用户之前最后执行的状态，理所当然我们可以在这个方法内完成一些基本的初始化，但是应该是轻量级的初始化操作，不然会导致程序启动时间长，影响用户体验。</p><p>举一些栗子：</p><p>不使用StoryBoard，需要配置window<br>第三方登录sdk注册，以及很多第三方sdk的初始化配置<br>判断程序接下来的业务逻辑，播不播放引导图片？播不播放开屏广告？有没有登录？<br>但项目复杂了之后，需要配置的东西越来越多，所以didFinishLaunching非常容易耦合，这是我们应该要注意的。</p><ul><li><p>(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {<br>  //若用户直接启动，launchOptions内无数据。</p><p>  //若由其他程序通过openURL:启动。<br>  //launchOptions中UIApplicationLaunchOptionsURLKey的数据为openURL:的参数url。<br>  //launchOptions中UIApplicationLaunchOptionsSourceApplicationKey的数据为启动本程序的源程序的bundle ID(NSString)。<br>  NSURL *url = [launchOptions objectForKey:UIApplicationLaunchOptionsURLKey];<br>  if (url) {</p><pre><code>[self launchOptionsWithURL:url];</code></pre><p>  }</p><p>  NSString *bundleId = [launchOptions objectForKey:UIApplicationLaunchOptionsSourceApplicationKey];<br>  if (bundleId) {</p><pre><code>[self launchOptionsWithBundleId:bundleId];</code></pre><p>  }</p><p>  //若由远程通知启动。<br>  //launchOptions中UIApplicationLaunchOptionsRemoteNotificationKey对应数据为启动本程序的远程通知信息useinfo(NSDictionary)。<br>  NSDictionary *useinfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];<br>  if (useinfo) {</p><pre><code>[self launchOptionsWithUseinfo:useinfo];</code></pre><p>  }</p><p>  return YES;<br>}</p><h5 id="DidBecomeActive"><a href="#DidBecomeActive" class="headerlink" title="DidBecomeActive"></a>DidBecomeActive</h5><p>DidBecomeActive：程序已激活。程序在处于前台时调用：程序第一次启动时、从后台返回前台时。 </p></li></ul><p>若程序之前在后台，可以在这方法内重新拉取数据，刷新用户界面。</p><ul><li>(void)applicationDidBecomeActive:(UIApplication *)application;<h5 id="WillResignActive"><a href="#WillResignActive" class="headerlink" title="WillResignActive"></a>WillResignActive</h5>WillResignActive：程序将要进入未激活。程序在处于前台时调用：有电话打进来、手机锁屏等。程序被其他任务强制占用了，就会调用这个方法，所以这个方法也称为程序中断调用方法。</li></ul><p>实际运用场景为：</p><p>对音频、视频、游戏的暂停操作<br>暂停定时器<br>减少OpenGL ES帧率<br>暂停正在执行的任务，若有下载任务可以取消或暂停。</p><ul><li>(void)applicationWillResignActive:(UIApplication *)application {</li></ul><p>}</p><h5 id="DidEnterBackground"><a href="#DidEnterBackground" class="headerlink" title="DidEnterBackground"></a>DidEnterBackground</h5><p>DidEnterBackground：程序已经进入后台。程序从前台进入后台时调用。</p><p>作用是：</p><p>释放共享资源<br>保存用户数据（写到硬盘）<br>作废计时器<br>保存足够的程序状态以便下次恢复</p><ul><li>(void)applicationDidEnterBackground:(UIApplication *)application {</li></ul><p>}<br>2.6 WillEnterForeground<br>WillEnterForeground：程序将要进入前台。程序从后台进入前台时调用。</p><p>WillEnterForeground主要用于撤销WillResignActive中做的操作。</p><ul><li>(void)applicationWillEnterForeground:(UIApplication *)application {</li></ul><p>}</p><h5 id="WillTerminate​​​​​​​"><a href="#WillTerminate​​​​​​​" class="headerlink" title="WillTerminate​​​​​​​"></a>WillTerminate​​​​​​​</h5><p>WillTerminate：程序将要终止。程序终止之前调用。</p><p>目的就是为了保留一些重要的数据，方便下次启动后的恢复，达到一种让用户感觉该程序永远运行在后台从来没被终止过的感觉。</p><ul><li><p>(void)applicationWillTerminate:(UIApplication *)application {</p><p>  [self saveContext];</p></li></ul><p>原文链接：<a href="https://blog.csdn.net/qq_36557133/article/details/86770301" target="_blank" rel="noopener">https://blog.csdn.net/qq_36557133/article/details/86770301</a></p><h4 id="Assets-xcassets"><a href="#Assets-xcassets" class="headerlink" title="Assets.xcassets"></a>Assets.xcassets</h4><p>Assets.xcassets是用来存放图像资源文件的。将一个图片放在Assets里面是这个样子的</p>{% image http://res.zhangyongfa888.site/1590384969071l5a56ook.png?imageslim 'back' '' %}<p>当然还能放一些自定义的颜色<br>使用方法：</p>{% image http://res.zhangyongfa888.site/1590385230758e1imim8a.png?imageslim '颜色使用' '' %}<h4 id="LaunchScreen-storyboard"><a href="#LaunchScreen-storyboard" class="headerlink" title="LaunchScreen.storyboard"></a>LaunchScreen.storyboard</h4><p>Launch screen interface file base name 这里只放了一个label</p><p>使用 Xcode storyboard(故事板) 来提供 app 的启动屏幕”的要求已延期到2020.6.30.</p><h4 id="main-m-主函数"><a href="#main-m-主函数" class="headerlink" title="main.m 主函数"></a>main.m 主函数</h4><pre><code>int main(int argc, char * argv[]) {    NSString * appDelegateClassName;        @autoreleasepool {    // Setup code that might create autoreleased objects goes here.    appDelegateClassName = NSStringFromClass([AppDelegate class]);}    return UIApplicationMain(argc, argv, nil, appDelegateClassName);}</code></pre><h4 id="main-storyboard-已删除"><a href="#main-storyboard-已删除" class="headerlink" title="main.storyboard  (已删除)"></a>main.storyboard  (已删除)</h4><p>删除方法：<a href="https://www.jianshu.com/p/12faf6fd7388" target="_blank" rel="noopener">https://www.jianshu.com/p/12faf6fd7388</a></p><h4 id="PrefixHeader-pch（手动创建）"><a href="#PrefixHeader-pch（手动创建）" class="headerlink" title="PrefixHeader.pch（手动创建）"></a>PrefixHeader.pch（手动创建）</h4><p>创建方法：<a href="https://blog.csdn.net/lxmy2012/article/details/53976228" target="_blank" rel="noopener">https://blog.csdn.net/lxmy2012/article/details/53976228</a><br>PrefixHeader.pch 是一个预编译的文件，可以被项目中的其它文件访问到，一般用来存放常用的宏、常用的头文件、配置日期等。</p><h4 id="study0518-Bridging-Header-h"><a href="#study0518-Bridging-Header-h" class="headerlink" title="study0518-Bridging-Header.h"></a>study0518-Bridging-Header.h</h4><p>Use this file to import your target’s public headers that you would like to expose to Swift.</p><p>swift混编的桥接头文件</p><h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><p>podfile是一个规范文件，描述一个或多个项目目标依赖项，CocoaPods管理iOS组件库.<br><a href="https://www.jianshu.com/p/dfaf0954b76d" target="_blank" rel="noopener">https://www.jianshu.com/p/dfaf0954b76d</a></p><p>项目中只依赖了SnapKit（swift）<a href="https://www.jianshu.com/p/332b816cd3e4" target="_blank" rel="noopener">https://www.jianshu.com/p/332b816cd3e4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h4&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lig
      
    
    </summary>
    
      <category term="oc" scheme="http://zhangyongfa888.site/categories/oc/"/>
    
    
      <category term="ios" scheme="http://zhangyongfa888.site/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>项目整理</title>
    <link href="http://zhangyongfa888.site/2020/04/08/%E9%A1%B9%E7%9B%AE%E6%95%B4%E7%90%86/"/>
    <id>http://zhangyongfa888.site/2020/04/08/项目整理/</id>
    <published>2020-04-08T07:45:00.000Z</published>
    <updated>2020-04-08T09:18:04.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><p>整理了一下做过/参与的部分项目。。</p><h4 id="油联易卡"><a href="#油联易卡" class="headerlink" title="油联易卡"></a>油联易卡</h4><img onclick="javascript:location.href='https://dl.pconline.com.cn/download/1044056.html'" style="height:100px;width:100px;display:block; margin:0 auto;display:block; margin:0 auto;" src="http://img.pconline.com.cn/images/nospd/upload/upc/tx/pcdlc/1704/07/c6/42005507_1491495632389.png"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><p>惠储油，会生活！4G时代领先的油联易卡储油服务产品，只为精明的你！ </p><p>油联易卡<a href="https://www.itjuzi.com/company/71124" target="_blank" rel="noopener">点此链接</a>由油联（北京）石油化工有限公司与海航云商控股有限公司联合发行，是适合在全国任意加油站，可用任意支付方式进行加油消费的创新型跨平台储油服务产品。<br>【产品特点】<br>油联易卡率先采用按“升”储油加油消费的模式，不仅可以通过储油优惠 + 加油优惠叠加的方式，为消费者带来更大的优惠；同时融合了先进的互联网、移动互联网、物联网产品解决方案，将储油、保值、通用、安全四大特点融为一体，是真正使消费者在自控油价，削减风险等方面得到长期利益的惠民型创新产品。<br>【1＋N种选择使用油联易卡的理由】　 </p><ul><li>储油功能<br>根据购卡选择地区当日成品油零售价，按“升”购买存储成品油。 </li><li>保值功能<br>享受储油按升优惠后，锁定油价，不受价格波动影响。 </li><li>优惠叠加<br>享有储油优惠后，用户仍可享受其他商家给予的加油优惠（如：银行卡优惠、加油站优惠）。 </li><li>交易安全<br>先进的密钥与安全认证体系，保障用户的每一笔交易真实、安全、可靠。 </li><li>服务便捷<br>通过油联手机APP客户服务端，用户可随时对账户进行管理。</li></ul><h4 id="自得网"><a href="#自得网" class="headerlink" title="自得网"></a>自得网</h4><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/youzide?release_id=57031ba0e75e2d4a04000006'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/824c6440b7299c8c963a329044d3b7dfb78a5235"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><p>自得网<a href="https://www.itjuzi.com/company/20133" target="_blank" rel="noopener">点此链接</a> 是一家留学生社交+互助网络平台，2015年4月正式上线，用户对象是中国已出国留学和即将出国留学的精英群体，服务网络遍及全美，覆盖北京重点高校。 自得网上拥有两百多服务客栈，它们的主人是来自130多所美国大学的中国留学生。自得网的目标是让富有创造力、视野开阔的学子们发挥他们的真正价值，让那些需要帮助、备受信息不对称之苦的人，找到拉他们一把的小伙伴。自得，得与不得，全在自己。 </p><h4 id="啄木鸟教育"><a href="#啄木鸟教育" class="headerlink" title="啄木鸟教育"></a>啄木鸟教育</h4><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/md16'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/db481bedcd6b0c0fed5fe3d260e205fc0a316102?e=1586336153&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:XGzt0xa_ENWnEBOGisv07SbxcWQ="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><p>啄木鸟<a href="'http://www.zmnedu.com/'">点此链接</a>国际教育专业美国留学咨询机构,专做美国留学,为数以千计的学子成功实现美国名校梦想。美国留学申请选择啄木鸟教育!</p><h4 id="中美新闻网-侨报2-0"><a href="#中美新闻网-侨报2-0" class="headerlink" title="中美新闻网-侨报2.0"></a>中美新闻网-侨报2.0</h4><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/sinous'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/243e457e1880753d67bb07eed857268cea6491cd?e=1586336347&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:TLOnzujpQdNmz6-FAeyfGaK7fPc="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><p><a href="http://www.chinadaily.com.cn/hqzx/2012-09/01/content_15721589.htm" target="_blank" rel="noopener">摘自ChinaDaily</a></p><p>中美新闻网<a href="http://www.sino-us.com" target="_blank" rel="noopener">“该链接已失效”</a>指向鲜明，定位清晰，关注点集中在世界两大经济体中国和美国，网站域名sino-us.com也充分展示了中美新闻网的定位和功能。</p><p>中美新闻网设置了聚焦中国、中美之间、老外在中国、外媒看中国、文化、生活等主要栏目，充分发挥格律媒体集团美国总部及北京代表处的资源优势，及时报道与中美两国相关联的政经要闻，以及中国在文化、经济、生活、旅游等方面的新闻和资讯。</p><p>中美新闻网的重点栏目“中美之间”，反映的是中美两国的政治关系和经济文化的互动和交流。“外媒看中国”集纳了英文主流媒体对中国的观感，从独特的视角解读中国。“老外在中国”则以在华的外国人和外企为采访对象，讲述外国人在中国的发展经历，见闻感受。</p><p>————————-分割线—————————</p><h3 id="货运宝产品"><a href="#货运宝产品" class="headerlink" title="货运宝产品"></a>货运宝产品</h3><p>货运宝，业务涵盖公路干线物流与同城货运。通过互联网科技，整合社会零散的运力资源与货运需求，使车-货-人得以快速链接。<br>平台通过实名认证和透明化的信用评价体系，为用户提供一个可以安心交易的货运平台。<br>生产制造、商贸等不同类型的企业，以及需要搬家、运货的组织和个人，都可以通过货运宝平台，快速找到附近合适的车辆/司机，通过议价（部分车型为定价制），获得合理价位的货运服务。<br>广大货车司机朋友，借助货运宝平台，可以快速找到适合自身运力、路程的货源订单，极大的提升货车利用率，从而获得丰厚的承运报酬。<br>货运宝，由河北智旦网络技术有限公司自主研发并运营。企业具备完善的管理制度，专业的技术和服务团队为用户提供优质的服务体验。产品业务从京津冀地区始发，目前已辐射全国100多个城市。</p><p>下载地址：<a href="http://www.zdhuoyunbao.com/download.html" target="_blank" rel="noopener">http://www.zdhuoyunbao.com/download.html</a></p><h5 id="货主端"><a href="#货主端" class="headerlink" title="货主端"></a>货主端</h5><img style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/85bb8b063a0ce89646a9e2af534452df4dc5df42?auth_key=1586333419-0-0-f34ada0db6e4641f778b30894821d34b="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="司机端"><a href="#司机端" class="headerlink" title="司机端"></a>司机端</h5><img style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/4aa206d7dff8a007ab6d60a87fb941f4408850b9?auth_key=1586335066-0-0-b03964fce5ebb550343c8864a6e3509b"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="企业端"><a href="#企业端" class="headerlink" title="企业端"></a>企业端</h5><img style="height:100px;width:100px;display:block;margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/4e72ed9c7ec24dc560b81aa1c829a419b0edf4ed?auth_key=1586335066-0-0-a34f0220739dc313035bfa25df31cb9b"><p><img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态"></p><h5 id="船运版"><a href="#船运版" class="headerlink" title="船运版"></a>船运版</h5><img style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/38cfbcfbc776222b9ab24ab1918a9d1209b54f86?auth_key=1586335126-0-0-316ccf2237a0b98c80291e25d380902f"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="船东版"><a href="#船东版" class="headerlink" title="船东版"></a>船东版</h5><img style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/1a5ddc3007190f8dfd12288076e6c63324138934?auth_key=1586335126-0-0-dc0fdc8f467f571a570cc40bf6d67aa1"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="物流版"><a href="#物流版" class="headerlink" title="物流版"></a>物流版</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h3 id="OA系统"><a href="#OA系统" class="headerlink" title="OA系统"></a>OA系统</h3><h5 id="OA1-0"><a href="#OA1-0" class="headerlink" title="OA1.0"></a>OA1.0</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/cisdomOA'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/3b2eeba6f9cd820ae09a9672c4f162749bda7e75?e=1586337030&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:aHZGSexRQu4qCiakXUlwjhI1eqg="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="OA2-0"><a href="#OA2-0" class="headerlink" title="OA2.0"></a>OA2.0</h5><img onclick="javascript:location.href='http://app.mi.com/details?id=com.cisdom.zdoaandroid'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/534d121d997c515afaad38b69aca59b52ba531b7?auth_key=1586335365-0-0-4c5c91a1c8ca3cb9f8a7041f6cbe35e8&tmp=1586333565.18402"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="OA物业版本"><a href="#OA物业版本" class="headerlink" title="OA物业版本"></a>OA物业版本</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/clan'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/d8c22bb388c31792e5bdc7f456ffc652f41aa9b5"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="OA零售精英版"><a href="#OA零售精英版" class="headerlink" title="OA零售精英版"></a>OA零售精英版</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/cdmoa'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/d8c22bb388c31792e5bdc7f456ffc652f41aa9b5"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-brightgreen.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="OA-X"><a href="#OA-X" class="headerlink" title="OA X"></a>OA X</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/cdmx'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/d8c22bb388c31792e5bdc7f456ffc652f41aa9b5"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><p>智旦OA是一款移动办公服务软件，功能十分齐全，有即时通讯、移动审批、手机考勤等功能，有了它，你就可以轻松办公，还可以提高工作效率，有需要的用户欢迎下载哦!</p><p><strong>智旦OA介绍</strong></p><p>智旦OA是河北智旦网络技术有限公司旗下一款移动办公软件，</p><p>能够帮助企业降低沟通、管理成本，提升企业办公效率，促进无纸化办公。</p><p>此应用适合需要使用移动办公的公司和个人用户，用户可通过此软件来管理客户，</p><p>完成行政审批申请等，管理人员也可通过此软件发布通告等。</p><p><strong>智旦OA特点</strong></p><p>办公邮件，随时响应</p><p>多种提醒方式，内部、外部邮件不再错过</p><p>即时通讯，安全沟通</p><p>同事之间提供微信级别聊天</p><p>移动审批，高效便捷</p><p>公文、报销、请假…快速审批</p><p>手机考勤，精准签到</p><p>WIFI、GPS锁定，告别打卡机</p><p>智慧办公，高效管理</p><p>提供多种移动OA功能，企业管理更高效</p><h4 id="智部落"><a href="#智部落" class="headerlink" title="智部落"></a>智部落</h4><h5 id="商铺端"><a href="#商铺端" class="headerlink" title="商铺端"></a>商铺端</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/cisdomShop'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/a6e2e7289b57df05019e9a03e0eb45cb1a07fa41?e=1586337572&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:7g4XBnkfT-9LR3ov1UUUZVSG24k="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="骑手端"><a href="#骑手端" class="headerlink" title="骑手端"></a>骑手端</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h4 id="寺庙"><a href="#寺庙" class="headerlink" title="寺庙"></a>寺庙</h4><h5 id="广德寺"><a href="#广德寺" class="headerlink" title="广德寺"></a>广德寺</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/gdsi'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/57518e7c29b5e8589099b49e6bd1e4067661ebf7?attname=blob&tmp=1586333904.4687555"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-green.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="石室禅院"><a href="#石室禅院" class="headerlink" title="石室禅院"></a>石室禅院</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/sscy'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/c4a165c74036391772b219ed18cc59356c9a3a13?e=1586337700&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:c9Z2gjd8ZSksftX_hRy3fFBK-x0="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-green.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h4 id="商城"><a href="#商城" class="headerlink" title="商城"></a>商城</h4><h5 id="智点点"><a href="#智点点" class="headerlink" title="智点点"></a>智点点</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/dcxt'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/55dcf8b0ed6d4ec83464b279cc06342950416259?e=1586337790&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:-bgUjUOfOKKGM2JBjmuTyRs-xus="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-off-inactive.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h5 id="大茶肆"><a href="#大茶肆" class="headerlink" title="大茶肆"></a>大茶肆</h5><pre><code>大茶肆农业科技有限公司，是一家致力于茶行业标准化线上平台的创新型企业。大茶肆旨在运用全新物联网经营理念，传承中国茶文化，通过智能物联网+众创+分享经济的方式，以传承，创新，专注，分享为核心，整合茶叶生产基地、茶叶加工基地、知名茶企茶匠、茶叶线下体验馆、茶职培训机构、茶叶农残质检等资源，集现代化农业与互联网科技为一体，做您身边的茶叶专家。</code></pre><img onclick="javascript:location.href='http://app.mi.com/details?id=cisdom.com.bigteaapp'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://oivkbuqoc.qnssl.com/8d0adb4e62c5670b56673b9586920c04aa229586?attname=blob&tmp=1586334282.957575"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-green.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h4 id="测试系统"><a href="#测试系统" class="headerlink" title="测试系统"></a>测试系统</h4><h5 id="消防考试系统"><a href="#消防考试系统" class="headerlink" title="消防考试系统"></a>消防考试系统</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/689l'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://pro-icon-qn.jappstore.com/f3c133101d5c173bb3d00449e812552528cf55e5?e=1586338015&token=LOvmia8oXF4xnLh0IdH05XMYpH6ENHNpARlmPc-T:bU2776yPWrHEzxvDUUpGaGg1KKw="><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-green.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure><h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><h5 id="一点英语xp"><a href="#一点英语xp" class="headerlink" title="一点英语xp"></a>一点英语xp</h5><img onclick="javascript:location.href='http://fir.zhangyongfa888.site/yidia'" style="height:100px;width:100px;display:block; margin:0 auto;" src="https://ali-fir-pro-icon.jappstore.com/bf2baf2f7bd1741571aa164d59f320ec02de929f?auth_key=1586336179-0-0-233a9a154db8b88467e7dadef19fed3d"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.shields.io/badge/service-on-green.svg" alt="状态" title>                </div>                <div class="image-caption">状态</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;时间轴&quot;&gt;&lt;a href=&quot;#时间轴&quot; class=&quot;headerlink&quot; title=&quot;时间轴&quot;&gt;&lt;/a&gt;时间轴&lt;/h3&gt;&lt;p&gt;整理了一下做过/参与的部分项目。。&lt;/p&gt;
&lt;h4 id=&quot;油联易卡&quot;&gt;&lt;a href=&quot;#油联易卡&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建（从入门到入门）</title>
    <link href="http://zhangyongfa888.site/2020/03/04/SSM%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>http://zhangyongfa888.site/2020/03/04/SSM搭建（从入门到入门）/</id>
    <published>2020-03-04T07:59:00.000Z</published>
    <updated>2020-03-10T05:36:00.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssm是个啥"><a href="#ssm是个啥" class="headerlink" title="ssm是个啥?"></a>ssm是个啥?</h2><p>二话不说直接搭建！<br>工具<br>IDEA:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1583309127230b1pjcmgu.png?imageslim" alt="idea" title>                </div>                <div class="image-caption">idea</div>            </figure></p><p>数据库用的是<strong>MariaDb</strong> 当成MySql使就行</p><h3 id="打开IDEA-新建项目"><a href="#打开IDEA-新建项目" class="headerlink" title="打开IDEA 新建项目"></a>打开IDEA 新建项目</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15833092403839jgt6oc1.png?imageslim" alt="新建SPRING-MVC项目" title>                </div>                <div class="image-caption">新建SPRING-MVC项目</div>            </figure><p>这里选择的是springmvc，网上其他教程里直接是maven。主要是项生成下项目的目录结构。一步一步往下走。</p><h3 id="添加maven支持"><a href="#添加maven支持" class="headerlink" title="添加maven支持"></a>添加maven支持</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1583309451887irzlsohg.png?imageslim" alt="添加maven" title>                </div>                <div class="image-caption">添加maven</div>            </figure><p>添加后回自动生成目录java和resource</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15833095178105f6gixsw.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p>在pom中添加所需的第三方包 主要是springmvc和mybatis的，当然还有其他常用库。</p><p>pom.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;groupId&lt;/groupId&gt;&lt;artifactId&gt;zyf888&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;!-- 全局属性配置 --&gt;&lt;properties&gt;    &lt;!-- spring版本号 --&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;!-- spring版本号 --&gt;    &lt;spring.version&gt;4.3.5.RELEASE&lt;/spring.version&gt;    &lt;!-- mybatis版本号 --&gt;    &lt;mybatis.version&gt;3.4.1&lt;/mybatis.version&gt;&lt;/properties&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;            &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;            &lt;version&gt;6.1.7&lt;/version&gt;            &lt;configuration&gt;                &lt;connectors&gt;                    &lt;connector implementation=&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;&gt;                        &lt;port&gt;8888&lt;/port&gt;                        &lt;maxIdleTime&gt;30000&lt;/maxIdleTime&gt;                    &lt;/connector&gt;                &lt;/connectors&gt;                &lt;webAppSourceDirectory&gt;${project.build.directory}/${pom.artifactId}-${pom.version}                &lt;/webAppSourceDirectory&gt;                &lt;contextPath&gt;/&lt;/contextPath&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;&lt;!--   依赖从这开始  &lt;dependencies&gt;是所有依赖包的父级标签  其中每添加一个依赖包，就加一个&lt;dependency&gt;标签  这里已经默认添加了一个测试包，我们需要把所有用到的依赖全部进来  (用到每个包的依赖信息需要自己找，下面是这个demo需要的依赖包)  --&gt;&lt;!--项目依赖 --&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;        &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;        &lt;version&gt;1.9.13&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- java ee --&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax&lt;/groupId&gt;        &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;        &lt;version&gt;7.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- 单元测试 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- 实现slf4j接口并整合 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;        &lt;version&gt;1.2.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- JSON --&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;        &lt;version&gt;2.8.7&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- 数据库 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.41&lt;/version&gt;        &lt;scope&gt;runtime&lt;/scope&gt;    &lt;/dependency&gt;    &lt;!-- 数据库连接池 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.mchange&lt;/groupId&gt;        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;        &lt;version&gt;0.9.5.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- MyBatis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;${mybatis.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- mybatis/spring整合包 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;        &lt;version&gt;1.3.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- Spring --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;        &lt;artifactId&gt;gson&lt;/artifactId&gt;        &lt;version&gt;2.8.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt;</code></pre><h4 id="配置web-xml以及spring"><a href="#配置web-xml以及spring" class="headerlink" title="配置web.xml以及spring"></a>配置web.xml以及spring</h4><p>web.xml</p><pre><code>    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;     version=&quot;3.0&quot;&gt;&lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;&lt;!-- Spring和mybatis的配置文件 --&gt;&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:spring-mybatis.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;!-- 编码过滤器 --&gt;&lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;async-supported&gt;true&lt;/async-supported&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- Spring监听器 --&gt;&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!-- 防止Spring内存溢出监听器 --&gt;&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!-- Spring MVC servlet --&gt;&lt;servlet&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;async-supported&gt;true&lt;/async-supported&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;    &lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;welcome-file-list&gt;    &lt;welcome-file&gt;/index.html&lt;/welcome-file&gt;    &lt;welcome-file&gt;/index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;&lt;/web-app&gt;</code></pre><p>  当前目录结构</p><p>  <img src="http://res.zhangyongfa888.site/1583310301018687va4nc.png?imageslim" alt="目录结构"><br>  spring-mvc</p><pre><code>      &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd                        http://www.springframework.org/schema/context                        http://www.springframework.org/schema/context/spring-context-4.0.xsd                        http://www.springframework.org/schema/mvc                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;&lt;bean id=&quot;mappingJacksonHttpMessageConverter&quot;      class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;    &lt;property name=&quot;supportedMediaTypes&quot;&gt;        &lt;list&gt;            &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!-- 启动SpringMVC的注解功能，完成请求和注解model的映射 --&gt;&lt;bean        class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;    &lt;property name=&quot;messageConverters&quot;&gt;        &lt;list&gt;            &lt;ref bean=&quot;mappingJacksonHttpMessageConverter&quot;/&gt;    &lt;!-- JSON转换器 --&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!-- 对静态资源的访问 --&gt;&lt;!-- &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot; /&gt;&lt;mvc:resources mapping=&quot;/css/**&quot;  location=&quot;/css/&quot; /&gt; --&gt;&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;&lt;context:component-scan base-package=&quot;com.zyf888.controller&quot;/&gt;&lt;!-- 添加注解驱动 --&gt;&lt;mvc:annotation-driven enable-matrix-variables=&quot;true&quot;&gt;    &lt;mvc:message-converters&gt;        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;            &lt;constructor-arg value=&quot;UTF-8&quot;/&gt;        &lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;&lt;!-- 允许对静态资源文件的访问 --&gt;&lt;mvc:default-servlet-handler/&gt;&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&gt;&lt;bean        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;    &lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;/&gt;    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;</code></pre><p>spring-mybatis.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                    http://www.springframework.org/schema/context                    http://www.springframework.org/schema/context/spring-context-3.1.xsd                    http://www.springframework.org/schema/mvc                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;&lt;!-- 自动扫描 --&gt;&lt;context:component-scan base-package=&quot;com.zyf888&quot; /&gt;&lt;!-- 配置数据库相关参数properties的属性：${url} --&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!-- 数据库连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;&lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;/&gt;&lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&gt;&lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&gt;&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;&lt;property name=&quot;maxPoolSize&quot; value=&quot;${c3p0.maxPoolSize}&quot;/&gt;&lt;property name=&quot;minPoolSize&quot; value=&quot;${c3p0.minPoolSize}&quot;/&gt;&lt;property name=&quot;autoCommitOnClose&quot; value=&quot;${c3p0.autoCommitOnClose}&quot;/&gt;&lt;property name=&quot;checkoutTimeout&quot; value=&quot;${c3p0.checkoutTimeout}&quot;/&gt;&lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;${c3p0.acquireRetryAttempts}&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置SqlSessionFactory对象 --&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                    http://www.springframework.org/schema/context                    http://www.springframework.org/schema/context/spring-context-3.1.xsd                    http://www.springframework.org/schema/mvc                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;&lt;!-- 自动扫描 --&gt;&lt;context:component-scan base-package=&quot;com.zyf888&quot; /&gt;&lt;!-- 配置数据库相关参数properties的属性：${url} --&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!-- 数据库连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;&lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;/&gt;&lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&gt;&lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&gt;&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;&lt;property name=&quot;maxPoolSize&quot; value=&quot;${c3p0.maxPoolSize}&quot;/&gt;&lt;property name=&quot;minPoolSize&quot; value=&quot;${c3p0.minPoolSize}&quot;/&gt;&lt;property name=&quot;autoCommitOnClose&quot; value=&quot;${c3p0.autoCommitOnClose}&quot;/&gt;&lt;property name=&quot;checkoutTimeout&quot; value=&quot;${c3p0.checkoutTimeout}&quot;/&gt;&lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;${c3p0.acquireRetryAttempts}&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置SqlSessionFactory对象 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!-- 注入数据库连接池 --&gt;&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;!-- 扫描model包 使用别名 --&gt;&lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.zyf888.model&quot;/&gt;&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;&lt;!--&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapping/*.xml&quot;/&gt;--&gt;&lt;/bean&gt;&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;com.zyf888.dao&quot; /&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;&lt;bean id=&quot;transactionManager&quot;      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p> jdbc.properties</p><pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                    http://www.springframework.org/schema/context                    http://www.springframework.org/schema/context/spring-context-3.1.xsd                    http://www.springframework.org/schema/mvc                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;&lt;!-- 自动扫描 --&gt;&lt;context:component-scan base-package=&quot;com.duoduo&quot; /&gt;&lt;!-- 配置数据库相关参数properties的属性：${url} --&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!-- 数据库连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;&lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;/&gt;&lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&gt;&lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&gt;&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;&lt;property name=&quot;maxPoolSize&quot; value=&quot;${c3p0.maxPoolSize}&quot;/&gt;&lt;property name=&quot;minPoolSize&quot; value=&quot;${c3p0.minPoolSize}&quot;/&gt;&lt;property name=&quot;autoCommitOnClose&quot; value=&quot;${c3p0.autoCommitOnClose}&quot;/&gt;&lt;property name=&quot;checkoutTimeout&quot; value=&quot;${c3p0.checkoutTimeout}&quot;/&gt;&lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;${c3p0.acquireRetryAttempts}&quot;/&gt;&lt;/bean&gt;&lt;!-- 配置SqlSessionFactory对象 --&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;&lt;!-- 注入数据库连接池 --&gt;&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;!-- 扫描model包 使用别名 --&gt;&lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.duoduo.model&quot;/&gt;&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapping/*.xml&quot;/&gt;&lt;/bean&gt;&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;com.duoduo.dao&quot; /&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;&lt;bean id=&quot;transactionManager&quot;      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;&lt;/bean&gt;</code></pre><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><pre><code>@Controller@RequestMapping(&quot;/&quot;)public class UserController {    @RequestMapping(value = &quot;/a&quot;)    @ResponseBody    public String allUser() {        return new Gson().toJson(&quot;alllll&quot;);    }}</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15833120492557c73v9di.png?imageslim" alt="连接好了" title>                </div>                <div class="image-caption">连接好了</div>            </figure><p>遇到了一个打包上传的问题，java.lang.ClassNotFoundException: org.springframework.web.util.IntrospectorCleanupListener<br>已经解决。需要这样操作<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/158331209073797a1phg4.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure></p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>接口操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1583312234780gdj7uwmn.png?imageslim" alt="userDao" title>                </div>                <div class="image-caption">userDao</div>            </figure><p>调用方法</p><pre><code>@Resourceprivate UserDao userDao;@RequestMapping(value = &quot;/&quot;)@ResponseBodypublic String allUser() {    return new Gson().toJson(userDao.getAllUser());}</code></pre><p><a href="http://localhost:8080/add?sex=%E7%94%B7&amp;mobile=18823123123&amp;name=%E5%BC%A0%E4%B8%89&amp;age=12" target="_blank" rel="noopener">http://localhost:8080/add?sex=%E7%94%B7&amp;mobile=18823123123&amp;name=%E5%BC%A0%E4%B8%89&amp;age=12</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1583312446926nfecx85d.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p>其中中文可能会有编码文字。设置数据库编码货主spring编码问题不作累述。</p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p><strong>后台好难啊</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ssm是个啥&quot;&gt;&lt;a href=&quot;#ssm是个啥&quot; class=&quot;headerlink&quot; title=&quot;ssm是个啥?&quot;&gt;&lt;/a&gt;ssm是个啥?&lt;/h2&gt;&lt;p&gt;二话不说直接搭建！&lt;br&gt;工具&lt;br&gt;IDEA:&lt;figure class=&quot;image-bubble&quot;
      
    
    </summary>
    
      <category term="SSM" scheme="http://zhangyongfa888.site/categories/SSM/"/>
    
    
      <category term="JAVA" scheme="http://zhangyongfa888.site/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MD插入音频视频</title>
    <link href="http://zhangyongfa888.site/2020/01/19/MD%E6%8F%92%E5%85%A5%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91/"/>
    <id>http://zhangyongfa888.site/2020/01/19/MD插入音频视频/</id>
    <published>2020-01-19T06:10:00.000Z</published>
    <updated>2020-07-08T05:44:16.995Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插入音频"><a href="#插入音频" class="headerlink" title="插入音频"></a>插入音频</h4><pre><code>&lt;audio id=&quot;audio&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;  &lt;source id=&quot;mp3&quot;src=&quot;https://sz-sycdn.kuwo.cn/4591311c3897b5be364a4a61fa5c0ee0/5e23f572/resource/n2/83/56/3583003746.mp3&quot;&gt;  &lt;/audio&gt;</code></pre><audio id="audio" controls preload="none">      <source id="mp3" src="https://sz-sycdn.kuwo.cn/4591311c3897b5be364a4a61fa5c0ee0/5e23f572/resource/n2/83/56/3583003746.mp3">      </audio><h4 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h4><h5 id="video"><a href="#video" class="headerlink" title="video"></a>video</h5><pre><code>&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;http://img.blog.fandong.me/2017-08-26-Markdown-Advance-Video.jpg&quot;&gt;  &lt;source id=&quot;mp4&quot; src=&quot;http://img.blog.fandong.me/2017-08-26-Markdown-Advance-Video.mp4&quot; type=&quot;video/mp4&quot;&gt;  &lt;/video&gt;</code></pre><video id="video" controls preload="none" poster="http://img.blog.fandong.me/2017-08-26-Markdown-Advance-Video.jpg">      <source id="mp4" src="http://img.blog.fandong.me/2017-08-26-Markdown-Advance-Video.mp4" type="video/mp4">      </video><h5 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h5><iframe height="440" width="100%" src="https://player.bilibili.com/player.html?aid=&bvid=BV11T4y1J7JQ&page=1&as_wide=1&high_quality=1&danmaku=0&t=30" frameborder="0" allowfullscreen></iframe><iframe height="440" width="100%" src="https://player.bilibili.com/player.html?aid=&bvid=BV1Ai4y1x7WK&page=1&as_wide=1&high_quality=1&danmaku=0&t=30" frameborder="0" allowfullscreen></iframe><iframe height="440" width="100%" src="https://player.bilibili.com/player.html?aid=&bvid=BV1Jk4y1r7dP&page=1&as_wide=1&high_quality=1&danmaku=0&t=30" frameborder="0" allowfullscreen></iframe><iframe height="440" width="100%" src="https://player.bilibili.com/player.html?aid=&bvid=BV1dz4y197zd&page=1&as_wide=1&high_quality=1&danmaku=0&t=30" frameborder="0" allowfullscreen></iframe><iframe height="440" width="100%" src="https://player.bilibili.com/player.html?aid=&bvid=BV1SK411p79C&page=1&as_wide=1&high_quality=1&danmaku=0&t=30" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;插入音频&quot;&gt;&lt;a href=&quot;#插入音频&quot; class=&quot;headerlink&quot; title=&quot;插入音频&quot;&gt;&lt;/a&gt;插入音频&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;audio id=&amp;quot;audio&amp;quot; controls=&amp;quot;&amp;quot; p
      
    
    </summary>
    
      <category term="插入音视频" scheme="http://zhangyongfa888.site/categories/%E6%8F%92%E5%85%A5%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="MarkDown" scheme="http://zhangyongfa888.site/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的进度条实现</title>
    <link href="http://zhangyongfa888.site/2020/01/19/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zhangyongfa888.site/2020/01/19/一个简单的进度条实现/</id>
    <published>2020-01-19T05:23:00.000Z</published>
    <updated>2020-03-10T05:29:55.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画基本分类"><a href="#动画基本分类" class="headerlink" title="动画基本分类"></a>动画基本分类</h2><p>Android动画可以分为帧动画、补间动画和属性动画。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1579411894618dltxd4no.png?imageslim" alt="动画分类" title>                </div>                <div class="image-caption">动画分类</div>            </figure><h3 id="视图动画（补间动画、帧动画）"><a href="#视图动画（补间动画、帧动画）" class="headerlink" title="视图动画（补间动画、帧动画）"></a>视图动画（补间动画、帧动画）</h3><p>补间动画通多对整个视图不断做图像的变换（平移、缩放、旋转、透明度）产生的动画效果，是一种渐进式动画。</p><p>逐帧动画，是通过一个接一个的加载Drawable资源来创建动画，按顺序的播放，像一个胶卷。对于视图动画，他只是单独的图片内容在变换，而不是整个视图。很显然，如果图片过多多大就会导致OOM异常。</p><p>视图动画的作用对象只能是View，在同一个图形通过在界面上进行透明度,缩放,旋转,平移的变化。</p><p>根据动画效果，补间动画分为以下4类：</p><ul><li>透明度动画（alpha）</li><li>缩放动画（scale）</li><li>平移动画（Translate）</li><li>旋转动画（rotate）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1579412014176fhc1z523.png?imageslim" alt="动画关系" title>                </div>                <div class="image-caption">动画关系</div>            </figure></li></ul><h4 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h4><h5 id="XML中的使用"><a href="#XML中的使用" class="headerlink" title="XML中的使用"></a>XML中的使用</h5><p>spaceshipImage.xml</p><pre><code>   &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;android:interpolator=&quot;@[package:]anim/interpolator_resource&quot;android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;&lt;alpha    android:fromAlpha=&quot;float&quot;    android:toAlpha=&quot;float&quot; /&gt;&lt;scale    android:fromXScale=&quot;float&quot;    android:toXScale=&quot;float&quot;    android:fromYScale=&quot;float&quot;    android:toYScale=&quot;float&quot;    android:pivotX=&quot;float&quot;    android:pivotY=&quot;float&quot; /&gt;&lt;translate    android:fromXDelta=&quot;float&quot;    android:toXDelta=&quot;float&quot;    android:fromYDelta=&quot;float&quot;    android:toYDelta=&quot;float&quot; /&gt;&lt;rotate    android:fromDegrees=&quot;float&quot;    android:toDegrees=&quot;float&quot;    android:pivotX=&quot;float&quot;    android:pivotY=&quot;float&quot; /&gt;&lt;set&gt;    ...&lt;/set&gt;&lt;/set&gt;</code></pre><h6 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h6><pre><code>ImageView spaceshipImage = (ImageView) findViewById(R.id.spaceshipImage);Animation myAnimation= AnimationUtils.loadAnimation(this, R.anim.filename);spaceshipImage.startAnimation(myAnimation);</code></pre><h5 id="JAVA中的使用"><a href="#JAVA中的使用" class="headerlink" title="JAVA中的使用"></a>JAVA中的使用</h5><pre><code>ImageView imageView = findViewById(R.id.image_view);    // 创建 需要设置动画的 视图View    // 组合动画设置    AnimationSet setAnimation = new AnimationSet(true);    // 创建组合动画对象(设置为true)    // 设置组合动画的属性    setAnimation.setRepeatMode(Animation.RESTART);    ...    // 逐个创建子动画,不作过多描述    // 子动画1:透明度动画    Animation alpha = new AlphaAnimation(1,0);    alpha.setDuration(3000);    ...    // 子动画2:缩放动画    Animation scale1 = new ScaleAnimation(1,0.5f,1,0.5f,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);    scale1.setDuration(1000);    ...    // 子动画3:平移动画    Animation translate = new TranslateAnimation(TranslateAnimation.RELATIVE_TO_PARENT,-0.5f,            TranslateAnimation.RELATIVE_TO_PARENT,0.5f,            TranslateAnimation.RELATIVE_TO_SELF,0            ,TranslateAnimation.RELATIVE_TO_SELF,0);    translate.setDuration(10000);    ...    // 子动画4:旋转动画    Animation rotate = new RotateAnimation(0,360,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);    rotate.setDuration(1000);    rotate.setRepeatMode(Animation.RESTART);    rotate.setRepeatCount(Animation.INFINITE);    ...    // 将创建的子动画添加到组合动画里    setAnimation.addAnimation(alpha);    setAnimation.addAnimation(rotate);    setAnimation.addAnimation(translate);    setAnimation.addAnimation(scale1);    imageView.startAnimation(setAnimation);    // 播放动画</code></pre><h5 id="插值器Interpolator"><a href="#插值器Interpolator" class="headerlink" title="插值器Interpolator"></a>插值器Interpolator</h5><p>插值器是在XML中定义的一个动画修改器，它影响动画的变化率。这允许现有动画附加加速、减速、重复、反弹等效果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1579412305326qxgxjpte.png?imageslim" alt="插值器" title>                </div>                <div class="image-caption">插值器</div>            </figure><pre><code>&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;...&lt;/set&gt;Animation alphaAnimation = new AlphaAnimation(1,0);alphaAnimation.setDuration(3000);            //创建插值器对象Interpolator interpolator = new OvershootInterpolator();            //为动画添加插值器alphaAnimation.setInterpolator(interpolator);            imageView.startAnimation(alphaAnimation);</code></pre><p> 插值器 更多参考 </p><p> <a href="https://blog.csdn.net/pzm1993/article/details/77926373" target="_blank" rel="noopener">Android动画之Interpolator(插值器)</a></p><h4 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15794126625009cs1ho9w.png?imageslim" alt="帧动画继承关系" title>                </div>                <div class="image-caption">帧动画继承关系</div>            </figure><h5 id="XML使用"><a href="#XML使用" class="headerlink" title="XML使用"></a>XML使用</h5><p>rocket_thrust</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;android:oneshot=[&quot;true&quot; | &quot;false&quot;] &gt;&lt;item    android:drawable=&quot;@[package:]drawable/drawable_resource_name&quot;    android:duration=&quot;integer&quot; /&gt;//如下&lt;item android:drawable=&quot;@drawable/wheel0&quot; android:duration=&quot;50&quot; /&gt;&lt;item android:drawable=&quot;@drawable/wheel1&quot; android:duration=&quot;50&quot; /&gt;&lt;item android:drawable=&quot;@drawable/wheel2&quot; android:duration=&quot;50&quot; /&gt;&lt;item android:drawable=&quot;@drawable/wheel3&quot; android:duration=&quot;50&quot; /&gt;&lt;item android:drawable=&quot;@drawable/wheel4&quot; android:duration=&quot;50&quot; /&gt;&lt;item android:drawable=&quot;@drawable/wheel5&quot; android:duration=&quot;50&quot; /&gt;&lt;/animation-list&gt;   ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);rocketImage.setBackgroundResource(R.drawable.rocket_thrust);rocketAnimation = (AnimationDrawable) rocketImage.getBackground();rocketAnimation.start();</code></pre><h5 id="JAVA方式"><a href="#JAVA方式" class="headerlink" title="JAVA方式"></a>JAVA方式</h5><pre><code>&lt;-- 直接从drawable文件夹获取动画资源（图片） --&gt;    animationDrawable = new AnimationDrawable();    for (int i = 0; i &lt;= 25; i++) {        int id = getResources().getIdentifier(&quot;a&quot; + i, &quot;drawable&quot;, getPackageName());        Drawable drawable = getResources().getDrawable(id);        animationDrawable.addFrame(drawable, 100);    }    &lt;-- 开始动画 --&gt;    btn_startFrame.setOnClickListener(new View.OnClickListener() {        @Override        public void onClick(View v) {            animationDrawable.setOneShot(true);            iv.setImageDrawable(animationDrawable);            // 获取资源对象            animationDrawable.stop();             // 特别注意：在动画start()之前要先stop()，不然在第一次动画之后会停在最后一帧，这样动画就只会触发一次            animationDrawable.start();            // 启动动画        }    });     &lt;-- 停止动画 --&gt;    btn_stopFrame.setOnClickListener(new View.OnClickListener() {        @Override        public void onClick(View v) {            animationDrawable.setOneShot(true);            iv.setImageDrawable(animationDrawable);            animationDrawable.stop();        }    });</code></pre><h3 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h3><p>属性动画，在Android 3.0的（API级别11）引入的，该属性动画系统可以制作动画的任何对象的属性。但是一般来说，属性动画系统是首选的使用方法，因为它更灵活，并提供更多功能。</p><h5 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h5><p>ObjectAnimator</p><p>我们通过控制传入 ofFloat()的第二个参数preperty 或者 XML中的android:propertyName属性 来产生不同动画效果，以下为Android预置好的一些属性：即四种基本变换，透明度、平移、缩放、旋转</p><table><thead><tr><th>属性</th><th>作用</th><th>数值类型</th></tr></thead><tbody><tr><td>alpha</td><td>透明度</td><td>float</td></tr><tr><td>translationX</td><td>X方向的位移</td><td>float</td></tr><tr><td>translationY</td><td>Y方向的位移</td><td>float</td></tr><tr><td>scaleX</td><td>X方向的缩放倍数</td><td>float</td></tr><tr><td>scaleY</td><td>Y方向的缩放倍数</td><td>float</td></tr><tr><td>rotation</td><td>以屏幕方向为轴的旋转度数</td><td>float</td></tr><tr><td>rotationX</td><td>以X轴为轴的旋转度数</td><td>float</td></tr><tr><td>rotationY</td><td>以Y轴为轴的旋转度数</td><td>float</td></tr></tbody></table><p>以上大部分来自<br>作者：whd_Alive<br>链接：<a href="https://www.jianshu.com/p/a480ca619dd9" target="_blank" rel="noopener">https://www.jianshu.com/p/a480ca619dd9</a></p><h4 id="进度条动画的创建"><a href="#进度条动画的创建" class="headerlink" title="进度条动画的创建"></a>进度条动画的创建</h4><p>先创建几个imageView 填充背景</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1579413166291sjoh0qzc.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15794132045408je926d3.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p>然后在代码中添加属性动画</p><pre><code>postDelayed(new Runnable() {        @Override        public void run() {            ObjectAnimator objectAnimatorX = ObjectAnimator.ofFloat(imageViews[position], &quot;scaleX&quot;, 1.2f, ratio[position]);            objectAnimatorX.setDuration(600);            objectAnimatorX.setInterpolator(new OvershootInterpolator());            objectAnimatorX.setRepeatMode(ValueAnimator.REVERSE);            objectAnimatorX.setRepeatCount(ValueAnimator.INFINITE);            objectAnimatorX.start();            ObjectAnimator objectAnimatorY = ObjectAnimator.ofFloat(imageViews[position], &quot;scaleY&quot;, 1.2f, ratio[position]);            objectAnimatorY.setRepeatCount(ValueAnimator.INFINITE);            objectAnimatorY.setDuration(600);            objectAnimatorY.setInterpolator(new OvershootInterpolator());            objectAnimatorY.setRepeatMode(ValueAnimator.REVERSE);            objectAnimatorY.start();            ObjectAnimator alpha = ObjectAnimator.ofFloat(imageViews[position], &quot;alpha&quot;, alphaMax, alphaMin);            alpha.setRepeatCount(ValueAnimator.INFINITE);            alpha.setDuration(600);            alpha.setRepeatMode(ValueAnimator.REVERSE);            alpha.setInterpolator(new DecelerateInterpolator());            alpha.start();        }    }, (position + 1) * 90);</code></pre><p>效果图就出来了……<br>but传不了动图。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/d56bl-gtyg2.gif" alt="动图来了" title>                </div>                <div class="image-caption">动图来了</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画基本分类&quot;&gt;&lt;a href=&quot;#动画基本分类&quot; class=&quot;headerlink&quot; title=&quot;动画基本分类&quot;&gt;&lt;/a&gt;动画基本分类&lt;/h2&gt;&lt;p&gt;Android动画可以分为帧动画、补间动画和属性动画。&lt;/p&gt;
&lt;figure class=&quot;image-b
      
    
    </summary>
    
      <category term="动画" scheme="http://zhangyongfa888.site/categories/%E5%8A%A8%E7%94%BB/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>小程序云函数初体验</title>
    <link href="http://zhangyongfa888.site/2019/12/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%87%BD%E6%95%B0%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://zhangyongfa888.site/2019/12/23/小程序云函数初体验/</id>
    <published>2019-12-23T08:51:00.000Z</published>
    <updated>2020-03-10T05:53:48.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="无服务器（Serverless）计算是什么"><a href="#无服务器（Serverless）计算是什么" class="headerlink" title="无服务器（Serverless）计算是什么"></a>无服务器（Serverless）计算是什么</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1577091391371my9dpavz.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p>云计算涌现出很多改变传统IT架构和运维方式的新技术，比如虚拟机、容器、微服务，无论这些技术应用在哪些场景，降低成本、提升效率是云服务永恒的主题。</p><p>过去十年来，我们已经把应用和环境中很多通用的部分变成了服务。Serverless的出现，带来了跨越式变革。Serverless把主机管理、操作系统管理、资源分配、扩容，甚至是应用逻辑的全部组件都外包出去，把它们看作某种形式的商品——厂商提供服务，我们掏钱购买。</p><p>过去是“构建一个框架运行在一台服务器上，对多个事件进行响应”，Serverless则变为“构建或使用一个微服务或微功能来响应一个事件”，做到当访问时，调入相关资源开始运行，运行完成后，卸载所有开销，真正做到按需按次计费。这是云计算向纵深发展的一种自然而然的过程。</p><p>Serverless是一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署。它与传统架构的不同之处在于，完全由第三方管理，由事件触发，存在于无状态（Stateless）、暂存（可能只存在于一次调用的过程中）计算容器内。构建无服务器应用程序意味着开发者可以专注在产品代码上，而无须管理和操作云端或本地的服务器或运行时。Serverless真正做到了部署应用无需涉及基础设施的建设，自动构建、部署和启动服务。</p><p>国内外的各大云厂商 Amazon、微软、Google、IBM、阿里云、腾讯云、华为云相继推出Serverless产品，Serverless也从概念、愿景逐步走向落地，在各企业、公司应用开来。</p><h3 id="理解Serverless技术—FaaS和BaaS"><a href="#理解Serverless技术—FaaS和BaaS" class="headerlink" title="理解Serverless技术—FaaS和BaaS"></a>理解Serverless技术—FaaS和BaaS</h3><p>Serverless由开发者实现的服务端逻辑运行在无状态的计算容器中，它由事件触发， 完全被第三方管理，其业务层面的状态则被开发者使用的数据库和存储资源所记录。Serverless涵盖了很多技术，分为两类：FaaS和BaaS。</p><h4 id="FaaS（Function-as-a-Service，函数即服务）"><a href="#FaaS（Function-as-a-Service，函数即服务）" class="headerlink" title="FaaS（Function as a Service，函数即服务）"></a>FaaS（Function as a Service，函数即服务）</h4><p>FaaS意在无须自行管理服务器系统或自己的服务器应用程序，即可直接运行后端代码。其中所指的服务器应用程序，是该技术与容器和PaaS（平台即服务）等其他现代化架构最大的差异。</p><p>FaaS可以取代一些服务处理服务器（可能是物理计算机，但绝对需要运行某种应用程序），这样不仅不需要自行供应服务器，也不需要全时运行应用程序。</p><p>FaaS产品不要求必须使用特定框架或库进行开发。在语言和环境方面，FaaS函数就是常规的应用程序。例如AWS Lambda的函数可以通过Javascript、Python以及任何JVM语言（Java、Clojure、Scala）等实现。然而Lambda函数也可以执行任何捆绑有所需部署构件的进程，因此可以使用任何语言，只要能编译为Unix进程即可。FaaS函数在架构方面确实存在一定的局限，尤其是在状态和执行时间方面。</p><p>在迁往FaaS的过程中，唯一需要修改的代码是“主方法/启动”代码，其中可能需要删除顶级消息处理程序的相关代码（“消息监听器接口”的实现），但这可能只需要更改方法签名即可。在FaaS的世界中，代码的其余所有部分（例如向数据库执行写入的代码）无须任何变化。</p><p>相比传统系统，部署方法会有较大变化 – 将代码上传至FaaS供应商，其他事情均可由供应商完成。目前这种方式通常意味着需要上传代码的全新定义（例如上传zip或JAR文件），随后调用一个专有API发起更新过程。</p><p>FaaS中的函数可以通过供应商定义的事件类型触发。对于亚马逊AWS，此类触发事件可以包括S3（文件）更新、时间（计划任务），以及加入消息总线的消息（例如Kinesis）。通常你的函数需要通过参数指定自己需要绑定到的事件源。</p><p>大部分供应商还允许函数作为对传入Http请求的响应来触发，通常这类请求来自某种该类型的API网关（例如AWS API网关、Webtask）。</p><h4 id="BaaS（Backend-as-a-Service，后端即服务）"><a href="#BaaS（Backend-as-a-Service，后端即服务）" class="headerlink" title="BaaS（Backend as a Service，后端即服务）"></a>BaaS（Backend as a Service，后端即服务）</h4><p>BaaS（Backend as a Service，后端即服务）是指我们不再编写或管理所有服务端组件，可以使用领域通用的远程组件（而不是进程内的库）来提供服务。理解BaaS，需要搞清楚它与PaaS的区别。</p><p>首先BaaS并非PaaS，它们的区别在于：PaaS需要参与应用的生命周期管理，BaaS则仅仅提供应用依赖的第三方服务。典型的PaaS平台需要提供手段让开发者部署和配置应用，例如自动将应用部署到Tomcat容器中，并管理应用的生命周期。BaaS不包含这些内容，BaaS只以API的方式提供应用依赖的后端服务，例如数据库和对象存储。BaaS可以是公共云服务商提供的，也可以是第三方厂商提供的。其次从功能上讲，BaaS可以看作PaaS的一个子集，即提供第三方依赖组件的部分。</p><p>BaaS服务还允许我们依赖其他人已经实现的应用逻辑。对于这点，认证就是一个很好的例子。很多应用都要自己编写实现注册、登录、密码管理等逻辑的代码，而对于不同的应用这些代码往往大同小异。完全可以把这些重复性的工作提取出来，再做成外部服务，而这正是Auth0和Amazon Cognito等产品的目标。它们能实现全面的认证和用户管理，开发团队再也不用自己编写或者管理实现这些功能的代码。</p><h3 id="无服务器（Serverless）计算如何工作？"><a href="#无服务器（Serverless）计算如何工作？" class="headerlink" title="无服务器（Serverless）计算如何工作？"></a>无服务器（Serverless）计算如何工作？</h3><p>与使用虚拟机或一些底层的技术来部署和管理应用程序相比，无服务器计算提供了一种更高级别的抽象。因为它们有不同的抽象和“触发器”的集合。</p><p>拿计算来讲，这种抽象有一个特定函数和抽象的触发器，它通常是一个事件。以数据库为例，这种抽象也许是一个表，而触发器相当于表的查询或搜索，或者通过在表中做一些事情而生成的事件。</p><p>比如一款手机游戏，允许用户在不同的平台上为全球顶级玩家使用高分数表。当请求此信息时，请求从应用程序到API接口。API接口或许会触发AWS的Lambda函数，或者无服务器函数，这些函数再从数据库表中获取到数据流，返回包含前五名分数的一定格式的数据。</p><p>一旦构建完成，应用程序的功能就可以在基于移动和基于 Web 的游戏版本中重用。</p><p>这跟设置服务器不同，不是必须要有Amazon EC2实例或服务器，然后等待请求。环境由事件触发，而响应事件所需的逻辑只在响应时执行。这意味着，运行函数的资源只有在函数运行时被创建，产生一种非常高效的方法来构建应用程序。</p><h3 id="无服务器（Serverless）适用于哪些场景？"><a href="#无服务器（Serverless）适用于哪些场景？" class="headerlink" title="无服务器（Serverless）适用于哪些场景？"></a>无服务器（Serverless）适用于哪些场景？</h3><p>serverless<br>在现阶段，Serverless主要应用在以下几个场景。首先在Web及移动端服务中，可以整合API网关和Serverles服务构建Web及移动后端，帮助开发者构建可弹性扩展、高可用的移动或 Web后端应用服务。在IoT场景下可高效的处理实时流数据，由设备产生海量的实时信息流数据，通过Serverles服务分类处理并写入后端处理。另外在实时媒体资讯内容处理场景里，用户上传的音视频到对象存储OBS，通过上传事件触发多个函数，分别完成高清转码、音频转码等功能，满足用户对实时性和并发能力的高要求。无服务器计算还适合于任何事件驱动的各种不同的用例，这包括物联网，移动应用，基于网络的应用程序和聊天机器人等。这里简单说两个场景，方便大家思考。</p><h4 id="场景一：应用负载有显著的波峰波谷"><a href="#场景一：应用负载有显著的波峰波谷" class="headerlink" title="场景一：应用负载有显著的波峰波谷"></a>场景一：应用负载有显著的波峰波谷</h4><p>Serverless 应用成功与否的评判标准并不是公司规模的大小，而是其业务背后的具体技术问题，比如业务波峰波谷明显，如何实现削峰填谷。一个公司的业务负载具有波峰波谷时，机器资源要按照峰值需求预估；而在波谷时期机器利用率则明显下降，因为不能进行资源复用而导致浪费。</p><p>业界普遍共识是，当自有机器的利用率小于 30%，使用 Serverless 后会有显著的效率提升。对于云服务厂商，在具备了足够多的用户之后，各种波峰波谷叠加后平稳化，聚合之后资源复用性更高。比如，外卖企业负载高峰是在用餐时期，安防行业的负载高峰则是夜间，这是受各个企业业务定位所限的；而对于一个成熟的云服务厂商，如果其平台足够大，用户足够多，是不应该有明显的波峰波谷现象的。</p><h4 id="场景二：典型用例-基于事件的数据处理"><a href="#场景二：典型用例-基于事件的数据处理" class="headerlink" title="场景二：典型用例 - 基于事件的数据处理"></a>场景二：典型用例 - 基于事件的数据处理</h4><p>视频处理的后端系统，常见功能需求如下：视频转码、抽取数据、人脸识别等，这些均为通用计算任务，可由函数计算执行。</p><p>开发者需要自己写出实现逻辑，再将任务按照控制流连接起来，每个任务的具体执行由云厂商来负责。如此，开发变得更便捷，并且构建的系统天然高可用、实时弹性伸缩，用户不需要关心机器层面问题。</p><h3 id="Serverless-的问题"><a href="#Serverless-的问题" class="headerlink" title="Serverless 的问题"></a>Serverless 的问题</h3><p>对于企业来说，支持Serverless计算的平台可以节省大量时间和成本，同时可以释放员工，让开发者得以开展更有价值的工作，而不是管理基础设施。另一方面可以提高敏捷度，更快速地推出新应用和新服务，进而提高客户满意度。但是Serverless不是完美的，它也存在一些问题，需要慎重应用在生产环境。</p><h4 id="不适合长时间运行应用"><a href="#不适合长时间运行应用" class="headerlink" title="不适合长时间运行应用"></a>不适合长时间运行应用</h4><p>Serverless 在请求到来时才运行。这意味着，当应用不运行的时候就会进入 “休眠状态”，下次当请求来临时，应用将会需要一个启动时间，即冷启动时间。如果你的应用需要一直长期不间断的运行、处理大量的请求，那么你可能就不适合采用 Serverless 架构。如果你通过 CRON 的方式或者 CloudWatch 来定期唤醒应用，又会比较消耗资源。这就需要我们对它做优化，如果频繁调用，这个资源将会常驻内存，第一次冷启之后，就可以一直服务，直到一段时间内没有新的调用请求进来，则会转入“休眠”状态，甚至被回收，从而不消耗任何资源。</p><h4 id="完全依赖于第三方服务"><a href="#完全依赖于第三方服务" class="headerlink" title="完全依赖于第三方服务"></a>完全依赖于第三方服务</h4><p>当你所在的企业云环境已经有大量的基础设施的时候，Serverless 对于你来说，并不是一个好东西。当我们采用某云服务厂商的 Serverless 架构时，我们就和该服务供应商绑定了，那么我们再将服务迁到别的云服务商上就没有那么容易了。</p><p>我们需要修改一下系列的底层代码，能采取的应对方案，便是建立隔离层。这意味着，在设计应用的时候，就需要隔离 API 网关、隔离数据库层，考虑到市面上还没有成熟的 ORM 工具，让你既支持Firebase，又支持 DynamoDB等等。这些也将带给我们一些额外的成本，可能带来的问题会比解决的问题多。</p><h4 id="缺乏调试和开发工具"><a href="#缺乏调试和开发工具" class="headerlink" title="缺乏调试和开发工具"></a>缺乏调试和开发工具</h4><p>当我使用 Serverless Framework 的时候，遇到了这样的问题：缺乏调试和开发工具。后来，我发现了 serverless-offline、dynamodb-local 等一系列插件之后，问题有一些改善。然而，对于日志系统来说，这仍然是一个艰巨的挑战。</p><p>每次你调试的时候，你需要一遍又一遍地上传代码。而每次上传的时候，你就好像是在部署服务器，并不能总是快速地定位出问题在哪。后来，找了一个类似于 log4j 这样的可以分级别记录日志的 Node.js 库 winston。它可以支持 error、warn、info、verbose、debug、silly 六个不同级别的日志，再结合大数据进行日志分析过滤，才能快速定位问题。</p><h4 id="构建复杂"><a href="#构建复杂" class="headerlink" title="构建复杂"></a>构建复杂</h4><p>Serverless 很便宜，但是这并不意味着它很简单。AWS Lambda的 CloudFormation配置是如此的复杂，并且难以阅读及编写（JSON 格式），虽然CloudFomation提供了Template模板，但想要使用它的话，需要创建一个Stack，在Stack中指定你要使用的Template,然后aws才会按照Template中的定义来创建及初始化资源。</p><p>而Serverless Framework的配置更加简单，采用的是 YAML 格式。在部署的时候，Serverless Framework 会根据我们的配置生成 CloudFormation 配置。然而这也并非是一个真正用于生产的配置,真实的应用场景远远比这复杂。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>云计算经过这么多年的发展，逐渐进化到用户仅需关注业务和所需的资源。比如，通过K8S这类编排工具，用户只要关注自己的计算和需要的资源（CPU、内存等）就行了，不需要操心到机器这一层。</p><p>Serverless架构让人们不再操心运行所需的资源，只需关注自己的业务逻辑，并且为实际消耗的资源付费。可以说，随着Serverless架构的兴起，真正的云计算时代才算到来了。</p><p>任何新概念新技术的落地，本质上都是要和具体业务去结合，去真正解决具体问题。虽然Serverless很多地方不成熟，亟待完善。不过Serverless自身的优越特性，对于开发者来说，吸引力是巨大的。相信随着技术的飞速发展，Serverless在未来还有无限可能！</p><p>以上转自<a href="https://blog.csdn.net/cc18868876837/article/details/90672971" target="_blank" rel="noopener">https://blog.csdn.net/cc18868876837/article/details/90672971</a></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>目前接触到的云函数有 小程序 云函数、leanClound 、Google Cloud Function等。</p><h4 id="小程序云函数"><a href="#小程序云函数" class="headerlink" title="小程序云函数"></a>小程序云函数</h4><p>新建小程序 勾选云函数选项，即可使用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1577091824160yqz0w36s.png?imageslim" alt="新建" title>                </div>                <div class="image-caption">新建</div>            </figure><p>右键新建函数比如getAllRecord。新建后，在云开发中的数据库中新建表后才能获取到。然后编写代码，比如获取所有数据</p><pre><code>// 先取出集合记录总数const countResult = await db.collection(&apos;recordlist&apos;).count()const total = countResult.total// 计算需分几次取const batchTimes = Math.ceil(total / 100)// 承载所有读操作的 promise 的数组const tasks = []for (let i = 0; i &lt; batchTimes; i++) {  const promise = db.collection(&apos;recordlist&apos;).skip(i * MAX_LIMIT).limit(MAX_LIMIT).get()  tasks.push(promise)}// 等待所有return (await Promise.all(tasks)).reduce((acc, cur) =&gt; {  return {    data: acc.data.concat(cur.data),    errMsg: acc.errMsg  }})</code></pre><p>添加记录</p><pre><code>db.collection(&quot;recordlist&quot;).add({  data: {    &quot;money&quot;: event.money,    &quot;title&quot;: event.title  },}).then(  res =&gt; {    return res;  })</code></pre><p> 小程序调用添加一条记录</p><pre><code> wx.cloud.callFunction({  name: &apos;getAllRecord&apos;,  data: {    &quot;method&quot;: &quot;add&quot;,    &quot;title&quot;: that.data.array[that.data.index],    &quot;money&quot;: that.data.inputStr  },  success: res =&gt; {    console.log(&apos;[云函数] [addOne] res &apos;, res)    that.getData(that);    that.setData({      hiddenAddModal: true    })  },  fail: err =&gt; {    console.error(&apos;[云函数] [addOne] 调用失败&apos;, err)  }})</code></pre><p>  小程序获取所有记录</p><pre><code>  wx.cloud.callFunction({  name: &apos;getAllRecord&apos;,  data: {    &quot;method&quot;: &quot;all&quot;  },  success: res =&gt; {    console.log(&apos;[云函数] [getAllRecord] res &apos;, res)    that.setData({      moneyList: res.result.data    })  },  fail: err =&gt; {    console.error(&apos;[云函数] [getAllRecord] 调用失败&apos;, err)  }})</code></pre><h4 id="leanClound云函数"><a href="#leanClound云函数" class="headerlink" title="leanClound云函数"></a><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">leanClound云函数</a></h4><p>leanClound接触比较早的但是从来没有用过的。至少，本博客接入的评论valine使用的是leanClound的服务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1577092418546xhvdiww2.png?imageslim" alt="云数据库中的数据" title>                </div>                <div class="image-caption">云数据库中的数据</div>            </figure><h4 id="谷歌云函数"><a href="#谷歌云函数" class="headerlink" title="谷歌云函数"></a><a href="https://cloud.google.com/functions/" target="_blank" rel="noopener">谷歌云函数</a></h4><pre><code>Google Cloud Functions 是一款基于事件的轻量级异步计算解决方案，可帮助您构建单一用途的小函数，用于在无需管理服务器或运行时环境的情况下就能对云端事件做出响应。现在注册 免费获得 $300 赠金注册即可获得 $300 赠金，未来 12 个月内可在 Google Cloud Platform 上随心使用。</code></pre><h4 id="谷歌脚本服务"><a href="#谷歌脚本服务" class="headerlink" title="谷歌脚本服务"></a>谷歌脚本服务</h4><p>谷歌云函数由于墙的原因，国内很少用。谷歌脚本服务在TG上实现：</p><pre><code>function preparePayload(body) {var payload;if (body.message.text) { //接收到文本   var restText = body.message.text;  if (restText.indexOf(&quot;名字&quot;) &gt;= 0) {    restText = &quot;我叫多多~&quot;;  }  //消息体  payload = {    &quot;method&quot;: &quot;sendMessage&quot;,    &quot;chat_id&quot;: body.message.chat.id,    &quot;text&quot;: restText,  }} else if (body.message.sticker) { //接收到表情 直接返回表情  payload = {    &quot;method&quot;: &quot;sendSticker&quot;,    &quot;chat_id&quot;: body.message.chat.id,    &quot;sticker&quot;: body.message.sticker.file_id  }} else if (body.message.photo) { //接收到图片，直接返回图片  array = body.message.photo;  text = array[1];  payload = {    &quot;method&quot;: &quot;sendPhoto&quot;,    &quot;chat_id&quot;: body.message.chat.id,    &quot;photo&quot;: text.file_id  }} else {  payload = {    &quot;method&quot;: &quot;sendMessage&quot;,    &quot;chat_id&quot;: body.message.chat.id,    &quot;text&quot;: &quot; 对不起，无法识别内容！！&quot;  }}return payload  }</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15770926048817fjbf1zj.png?imageslim" alt="多多机器人" title>                </div>                <div class="image-caption">多多机器人</div>            </figure><p>这里自动回复的是输入什么回复什么，匹配到关键字后回复指定字符或者媒体资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;无服务器（Serverless）计算是什么&quot;&gt;&lt;a href=&quot;#无服务器（Serverless）计算是什么&quot; class=&quot;headerlink&quot; title=&quot;无服务器（Serverless）计算是什么&quot;&gt;&lt;/a&gt;无服务器（Serverless）计算是什么&lt;/
      
    
    </summary>
    
      <category term="Serverless" scheme="http://zhangyongfa888.site/categories/Serverless/"/>
    
      <category term="Telegram" scheme="http://zhangyongfa888.site/categories/Serverless/Telegram/"/>
    
    
      <category term="小程序" scheme="http://zhangyongfa888.site/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>对一点英语进行破解（xp模块）</title>
    <link href="http://zhangyongfa888.site/2019/12/20/%E5%AF%B9%E4%B8%80%E7%82%B9%E8%8B%B1%E8%AF%AD%E8%BF%9B%E8%A1%8C%E7%A0%B4%E8%A7%A3%EF%BC%88xp%E6%A8%A1%E5%9D%97%EF%BC%89/"/>
    <id>http://zhangyongfa888.site/2019/12/20/对一点英语进行破解（xp模块）/</id>
    <published>2019-12-20T08:13:00.000Z</published>
    <updated>2020-03-04T07:56:47.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>某同事要学应用，拿出来几个app让给破解了…… 趁着闲工夫，简单“破解”了一下。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code>private void hookYidian(final XC_LoadPackage.LoadPackageParam lpparam) {    if (!lpparam.processName.equals(&quot;com.wumii.android.athena&quot;)) {        return;    }    //因为使用的360加固，要拿到360的context，所以在360加固的StubApp中获取。    XposedHelpers.findAndHookMethod(&quot;com.stub.StubApp&quot;, lpparam.classLoader,            &quot;attachBaseContext&quot;, Context.class, new XC_MethodHook() {                @Override                protected void afterHookedMethod(MethodHookParam param) throws Throwable {                    super.afterHookedMethod(param);                    final Context context = (Context) param.args[0];                    final ClassLoader cl = context.getClassLoader();                    XposedBridge.log(&quot;hookYidian &quot; + cl.getClass().getName());                    //第一个破解需求：几次发音后，不能发音了，而且分数被模糊了，求破解                    //解决办法：拿到这个类SpeakScoreView 在检查是不是vip时候，强制返回是vip 这里的意思应该是 “是不是需要vip权限” =&gt;false                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.ui.widget.SpeakScoreView&quot;, cl, &quot;setCheckVip&quot;, boolean.class, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                            param.args[0] = false;                            XposedBridge.log(&quot;hookYidian beforeHookedMethod setCheckVip &quot; + param.args[0]);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            XposedBridge.log(&quot;hookYidian afterHookedMethod setCheckVip &quot; + param.args[0]);                        }                    });                    //上一步发现 最后一次发音后，分数的视图被模糊 在这里直接返回 不模糊 测试生效~                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.ui.widget.SpeakScoreView&quot;, cl, &quot;setBlur&quot;, boolean.class, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                            param.args[0] = false;                            XposedBridge.log(&quot;hookYidian beforeHookedMethod setBlur &quot; + param.args[0]);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            XposedBridge.log(&quot;hookYidian afterHookedMethod setBlur&quot; + param.args[0]);                        }                    });                    //这里是vip视频 vip下才能进入，非vip有弹窗提示 所以在弹窗之前 返回不需要vip权限 直接跳转到下页                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.ui.practice.video.PlayingVideoPagerFragment&quot;, cl, &quot;h&quot;, boolean.class, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                            param.args[0] = false;                            XposedBridge.log(&quot;hookYidian beforeHookedMethod PlayingVideoPagerFragment vipTip &quot; + param.args[0]);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            XposedBridge.log(&quot;hookYidian afterHookedMethod  PlayingVideoPagerFragment vipTip&quot; + param.args[0]);                        }                    });                    //这里是确实是忘了什么东西了。                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.store.W&quot;, cl, &quot;W&quot;, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            param.setResult(true);                            XposedBridge.log(&quot;hookYidian afterHookedMethod W vipTip &quot; + param.getResult());                        }                    });                    //经过打印 发现之前为false 改为vip 强制返回true                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.model.ui.PlayingVideoData&quot;, cl, &quot;getVip&quot;, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            param.setResult(true);                            XposedBridge.log(&quot;hookYidian afterHookedMethod W vipTip &quot; + param.getResult());                        }                    });                    //实在是忘了是干啥的了                    Class c = XposedHelpers.findClass(&quot;com.wumii.android.athena.model.ui.PlayingVideoData&quot;, cl);                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.ui.practice.PlayingVideoActivity.a&quot;, cl, &quot;a&quot;, Context.class, c, String.class, boolean.class, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                            XposedBridge.log(&quot;hookYidian PlayingVideoActivity beforeHookedMethod &quot; + param.args[3]);                            param.args[3] = false;                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            XposedBridge.log(&quot;hookYidian PlayingVideoActivity afterHookedMethod &quot; + param.args[3]);                        }                    });                    //10000是点击查看示意的次数 然而没啥用 因为最后不要这个提示了                    Class f = XposedHelpers.findClass(&quot;com.wumii.android.athena.core.feature.FeatureType&quot;, cl);                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.c.c.e&quot;, cl, &quot;a&quot;, f, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            param.setResult(10000);                        }                    });                    //发音专项 不需要vip权限 返回false                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.c.c.e&quot;, cl, &quot;b&quot;, f, String.class, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            param.setResult(false);                        }                    });                    //由于是一个H5页面 找源代码找了好久，泛型有一个Config类中有个getVip方法 返回true 则都能看了                    XposedHelpers.findAndHookMethod(&quot;com.wumii.android.athena.model.realm.Config&quot;, cl, &quot;getVip&quot;, new XC_MethodHook() {                        @Override                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                            super.beforeHookedMethod(param);                        }                        @Override                        protected void afterHookedMethod(MethodHookParam param) throws Throwable {                            super.afterHookedMethod(param);                            param.setResult(true);                        }                    });                }            });}</code></pre><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>  太极中不能添加插件 需要提交给太极的作者才能使用，所以建议使用virtualXposed。当前hook的一点应用版本是v3.15.0。</p><p>  <img src="http://res.zhangyongfa888.site/1576830573345lwus008f.png?imageslim" alt="公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;某同事要学应用，拿出来几个app让给破解了…… 趁着闲工夫，简单“破解”了一下。&lt;/p&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot;
      
    
    </summary>
    
      <category term="逆向" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/"/>
    
      <category term="Xposed" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/Xposed/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用反射和插件化实现实现对宿主更新</title>
    <link href="http://zhangyongfa888.site/2019/12/16/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%B0%84%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%AE%BF%E4%B8%BB%E6%9B%B4%E6%96%B0/"/>
    <id>http://zhangyongfa888.site/2019/12/16/使用反射和插件化实现实现对宿主更新/</id>
    <published>2019-12-16T01:49:00.000Z</published>
    <updated>2020-03-04T07:52:54.764Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>对于先有项目，没有集成热更新功能，但是集成了滴滴的插件化。唯一的缺陷就是无法在不更新宿主的情况下对宿主进行更新。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>还好在打开宿主时候的splash页和main页进行了加载了一个备用插件，可以在这个备用插件中进行操作。<br>splash中的代码，在首页加载push插件，原计划此插件是针对不同的手机厂商集成不同的第三方推送，现在正好可修复宿主。</p><pre><code>Class cl = plugin.getClassLoader().loadClass(&quot;***.huozhu.plugin_push.PushDispatch&quot;);                           Constructor ct = cl.getDeclaredConstructor(new Class[]{Context.class});                           AppIntent appIntent = (AppIntent) ct.newInstance(new Object[]{context});                           Intent intent = new Intent();                           intent.putExtra(&quot;from&quot;, &quot;splash&quot;);                           appIntent.startAppActivity(intent);</code></pre><p>main中的代码</p><pre><code>LogUtils.e(&quot;plugin---&gt;&quot; + plugin.getPackageName());                Class cl = plugin.getClassLoader().loadClass(&quot;***.huozhu.plugin_push.PushDispatch&quot;);                Constructor ct = cl.getDeclaredConstructor(new Class[]{Context.class});                AppIntent appIntent = (AppIntent) ct.newInstance(new Object[]{context});                Intent intent = new Intent();                intent.putExtra(&quot;from&quot;, &quot;main&quot;);                appIntent.startAppActivity(intent);</code></pre><h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>目前的需求是修改主页中菜单的数据，要求新添加一行数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15764614050129jii4u3w.png?imageslim" alt="push中的处理" title>                </div>                <div class="image-caption">push中的处理</div>            </figure>其中extra是处理推送的情况，小米推送（极光）点击无法弹出界面，所以需要自己重写通知。from用于区分来源。比如这次要修改主页的一行数据<p>先看下宿主代码，找到切入点：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1576461670707y1zhwrus.png?imageslim" alt="main代码" title>                </div>                <div class="image-caption">main代码</div>            </figure>宿主中 在这里对数据进行添加，是一个网络请求。考虑会有延时。所以有两个方案，一个是延时后添加一条，一个是hook网络请求，重写添加全部。可行性的话，1很简单，2过于繁琐。针对1方案，再考虑切入点。可以针对menuModels进行数据添加，也可对adapter进行数据添加。考虑到对集合添加后还需要adapter刷新，所以直接对adapter进行添加数据。<p>代码</p><pre><code> private void setMenu() {    try {        Class menuModelClz = contextHost.getClassLoader().loadClass(&quot;****.huozhu.ep.model.MenuModel&quot;);        Constructor constructor = menuModelClz.getConstructor(new Class[]{int.class, boolean.class, String.class, int.class});        Object instance = constructor.newInstance(R.drawable.host_main_menu_driver_group, false, &quot;我的承运人&quot;, 7);        Field field = AppUtils.activities.get(0).getClass().getDeclaredField(&quot;adapter&quot;);        LogUtils.e(&quot;setMenu  field   &quot; + field.getClass().toString());        field.setAccessible(true);        BaseQuickAdapter adapter = (BaseQuickAdapter) field.get(AppUtils.activities.get(0));        if (adapter == null) {            new Handler().postDelayed(new Runnable() {                @Override                public void run() {                    setMenu();                }            }, 2000);        }        adapter.addData(2, instance);    } catch (Exception e) {        LogUtils.e(&quot;setMenu Error    &quot; + e.toString());    }}</code></pre><p>  这样就对宿主进行了数据的添加。</p><h4 id="其他修改"><a href="#其他修改" class="headerlink" title="其他修改"></a>其他修改</h4><p>  再有一个支付弹窗，直接使用的是宿主中的方法。所以如果要该支付这块，要更新宿主。那岂不是很麻烦。所以反射就又用到了。功能修改是 点击最后一行的时候由“下单”改为“去支付”。<br>  现有的操作是对这个弹窗视图进行覆写，然后重写其中的点击事件的代码。所有的控件都能顺利拿到，唯独这个点击事件。所有通过反射，当弹窗显示的时候，对这个“下单”的按钮进行hook。</p><p>  代码：</p><pre><code>  private void hookOnClickListener(View view) {    try {        // 得到 View 的 ListenerInfo 对象        //得到getListenerInfo方法        Method getListenerInfo = View.class.getDeclaredMethod(&quot;getListenerInfo&quot;);        getListenerInfo.setAccessible(true);        //得到ListenerInfo变量        Object listenerInfo = getListenerInfo.invoke(view);        // 得到 原始的 OnClickListener 对象        //获取指定类        Class&lt;?&gt; listenerInfoClz = Class.forName(&quot;android.view.View$ListenerInfo&quot;);        //获取类中的变量        Field mOnClickListener = listenerInfoClz.getDeclaredField(&quot;mOnClickListener&quot;);        mOnClickListener.setAccessible(true);        View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);        // 用自定义的 OnClickListener 替换原始的 OnClickListener        View.OnClickListener hookedOnClickListener = new HookedOnClickListener(originOnClickListener);        mOnClickListener.set(listenerInfo, hookedOnClickListener);    } catch (Exception e) {    }}class HookedOnClickListener implements View.OnClickListener {    private View.OnClickListener origin;    HookedOnClickListener(View.OnClickListener origin) {        this.origin = origin;    }    @Override    public void onClick(View v) {        if (origin != null) {            origin.onClick(v);        }        payBtn.setText(&quot;去支付&quot;);    }}</code></pre><p>   还有一种方法就是对setText进行监听，当这个控件被赋值为“下单”的时候，重新赋值为“去支付”。</p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>  hook的切入点很重要。顺便对反射进行了复习，觉得法国生物学家拉马克提出的“用进废退”果然没错，经常使用就会很顺利，一不使用的就感觉自己退化了一样，跟不上了。可能导致最后的结局就是“适者生存”吧！</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>  <a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></p><p>  <a href="https://blog.csdn.net/shoneworn/article/details/80476089" target="_blank" rel="noopener">Hook技术看这篇就够了</a></p><p>  <a href="https://www.jianshu.com/p/0799aa19ada1" target="_blank" rel="noopener">一文读懂 AOP | 你想要的最全面 AOP 方法探讨</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;对于先有项目，没有集成热更新功能，但是集成了滴滴的插件化。唯一的缺陷就是无法在不更新宿主的情况下对宿主进行更新。&lt;/p&gt;
&lt;h4 id=&quot;解
      
    
    </summary>
    
      <category term="插件化" scheme="http://zhangyongfa888.site/categories/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="反射" scheme="http://zhangyongfa888.site/categories/%E6%8F%92%E4%BB%B6%E5%8C%96/%E5%8F%8D%E5%B0%84/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用frida脱壳</title>
    <link href="http://zhangyongfa888.site/2019/11/29/%E4%BD%BF%E7%94%A8frida%E8%84%B1%E5%A3%B3/"/>
    <id>http://zhangyongfa888.site/2019/11/29/使用frida脱壳/</id>
    <published>2019-11-29T06:29:00.000Z</published>
    <updated>2020-03-04T07:52:54.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安卓常见脱壳方法"><a href="#安卓常见脱壳方法" class="headerlink" title="安卓常见脱壳方法"></a>安卓常见脱壳方法</h3><p>之前了解过一些加固方法，像360，乐固，爱加密，梆梆等。很多apk包都经过加壳处理，因此想了解更多内容就需要对加壳的APP进行脱壳处理。</p><h4 id="drizzleDumper"><a href="#drizzleDumper" class="headerlink" title="drizzleDumper"></a>drizzleDumper</h4><p>1.下载文件 <a href="https://www.lanzous.com/i7qbkva" target="_blank" rel="noopener">https://www.lanzous.com/i7qbkva</a></p><p>2.将对应系统架构的drizzleDumper移动到根目录/data/local/tmp下，赋予读写执行权限</p><p>3.cmd进入到该目录下 执行 ./drizzleDumper 包名 时间</p><p>包名：要脱壳应用的包名</p><p>时间：单位s,打卡应用后多久后开始脱壳</p><p>4.脱壳的文件保存在/data/local/tmp/ </p><p><strong><em>现有样例apk 360/乐固 无法脱壳/小米MIX2S/Android10/其他机型未测试</em></strong></p><h4 id="FDex2"><a href="#FDex2" class="headerlink" title="FDex2"></a>FDex2</h4><p>FDex2基于xposed框架实现。</p><p>1.下载FDex2 ,VXP  <a href="https://www.lanzous.com/b098smcoj" target="_blank" rel="noopener">https://www.lanzous.com/b098smcoj</a> 密码:tuoqiao</p><p>2.安装FDEX2 和要脱壳的应用到 VXP中。</p><p>3.重启VXP，打卡FDEX2选中要脱壳的应用</p><p>4.打开被脱的应用</p><p>5.生成的dex在data/data/io.va.exposed.virtual/data/user/0/包名/</p><p><strong><em>现有样例apk 360/乐固 无法脱壳/小米MIX2S/Android10/其他机型未测试</em></strong></p><h4 id="ZjDroid"><a href="#ZjDroid" class="headerlink" title="ZjDroid"></a><a href="https://github.com/halfkiss/ZjDroid" target="_blank" rel="noopener">ZjDroid</a></h4><p> FDex2 同样基于xposed框架实现。具体操作 详见<a href="https://www.cnblogs.com/goodhacker/p/3961045.html" target="_blank" rel="noopener">https://www.cnblogs.com/goodhacker/p/3961045.html</a></p><p> <a href="https://www.lanzous.com/i7qcfdi" target="_blank" rel="noopener"> 下载ZjDroid</a></p><p> <strong><em>现有样例apk 360/乐固 无法脱壳/小米MIX2S/Android10/其他机型未测试</em></strong></p><h4 id="易开发"><a href="#易开发" class="headerlink" title="易开发"></a>易开发</h4><p>易开发是一款帮助开发人员快速开发的工具，功能包括界面分析，页面信息等。目前软件尚未完成，更多功能完善中。详见 <a href="https://github.com/WrBug/DeveloperHelper" target="_blank" rel="noopener">https://github.com/WrBug/DeveloperHelper</a></p><p>下载工具 <a href="https://www.coolapk.com/apk/com.wrbug.developerhelper" target="_blank" rel="noopener">https://www.coolapk.com/apk/com.wrbug.developerhelper</a></p><p><strong><em>现有样例apk 360/乐固 无法脱壳/小米MIX2S/Android10/其他机型未测试</em></strong></p><h4 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h4><p>1.Frida的安装很简单，需要在windows安装frida客户端和在安卓安装frida服务端。需要python+node环境。</p><p>__windows __</p><p>安装python和pip，注意添加环境变量，打开pip的安装包，输入命令</p><pre><code>pip install Frida-tools</code></pre><p>到python安装目录/script</p><pre><code>pipinstall  selenium</code></pre><p> __ android __</p><p> 首先到github上下载frida-server，网址为<a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">https://github.com/frida/frida/releases</a></p><p> 找到符合自己系统架构的文件</p><p> 移动到data/local/tmp/下 赋予可读写执行权限。</p><p> 2.开启服务</p><p> adb shell</p><p> adb su</p><p> ./data/local/tmp/frida-server-12.7.23-android-arm64</p><p> cmd不报错 弹窗不消失表示服务在运行。</p><p> 3.开始脱壳</p><p> 使用<a href="https://github.com/GuoQiang1993/Frida-Apk-Unpack" target="_blank" rel="noopener">https://github.com/GuoQiang1993/Frida-Apk-Unpack</a> 提供的js 去脱壳。</p><p> <img src="http://res.zhangyongfa888.site/1575011142974yvrpfxwf.png?imageslim" alt="样例"></p><p><strong><em>现有样例apk 360/乐固 脱壳 小米MIX2S/Android10 测试无法脱壳 红米6 pro/Android9可脱壳</em></strong></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p> 其他脱壳方法还包括 IDA调试脱壳/修改系统源码主动脱壳/虚拟化等技术，仍在学习中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安卓常见脱壳方法&quot;&gt;&lt;a href=&quot;#安卓常见脱壳方法&quot; class=&quot;headerlink&quot; title=&quot;安卓常见脱壳方法&quot;&gt;&lt;/a&gt;安卓常见脱壳方法&lt;/h3&gt;&lt;p&gt;之前了解过一些加固方法，像360，乐固，爱加密，梆梆等。很多apk包都经过加壳处理，因此想了
      
    
    </summary>
    
      <category term="逆向" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/%E8%84%B1%E5%A3%B3/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记录一次xp模块过程、</title>
    <link href="http://zhangyongfa888.site/2019/11/26/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1xp%E6%A8%A1%E5%9D%97%E8%BF%87%E7%A8%8B%E3%80%81/"/>
    <id>http://zhangyongfa888.site/2019/11/26/记录一次xp模块过程、/</id>
    <published>2019-11-26T03:15:00.000Z</published>
    <updated>2020-03-04T07:52:54.766Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0X01"><a href="#0X01" class="headerlink" title="0X01"></a>0X01</h4><p>无意间发现一款老司机应用，用起来还不错，但是可恶的是有次数限制。怒。于是念念不忘，要破了他！</p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>按照以往的经验，先拿到apk中的dex文件，但愿不要加固。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1574738377614tkp2dfp0.png?imageslim" alt="smali2" title>                </div>                <div class="image-caption">smali2</div>            </figure><p>不慌 问题不大。才两个包，好找。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/157473852742718lah1yb.png?imageslim" alt="入口" title>                </div>                <div class="image-caption">入口</div>            </figure><p>找到了splash入口，阅读代码后发现 root后不能使用，使用代理不能使用，模拟器不能使用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1574738616032hnr8mqrb.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p>那好 先去了。</p><h5 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1574738709346st15sg74.png?imageslim" alt="initView" title>                </div>                <div class="image-caption">initView</div>            </figure><p> b()方法中有个c方法，返回 检测到您使用的是模拟器或者设备已经root,不允许继续使用，所以 hook c方法 强制返回false 使其能够进入到a.a(activity)中。</p><pre><code>XposedHelpers.findAndHookMethod(&quot;com.niming.douyin.ui.splash.SplashActivity&quot;, cl, &quot;c&quot;, new XC_MethodHook() {                @Override                protected void afterHookedMethod(MethodHookParam param) throws Throwable {                    super.afterHookedMethod(param);                    XposedBridge.log(&quot;SplashActivity beforeHookedMethod   &quot; + param.getResult());                    param.setResult(false);                }            });</code></pre><p>   b中还有一个方法，!k.b(this.activity)，看代码是把所有的模拟器标识都列了出来，不知道为啥禁用模拟器，可能这些限制是为了躲坑。</p><p>   <img src="http://res.zhangyongfa888.site/1574739061687qv8842nz.png?imageslim" alt="模拟器识别"></p><p> 使用xp 强制也给他通过</p><pre><code>XposedHelpers.findAndHookMethod(&quot;com.niming.douyin.ui.splash.SplashActivity&quot;, cl, &quot;a&quot;, Context.class, new XC_MethodHook() {                @Override                protected void afterHookedMethod(MethodHookParam param) throws Throwable {                    super.afterHookedMethod(param);                    XposedBridge.log(&quot;SplashActivity beforeHookedMethod   &quot; + param.getResult());                    param.setResult(false);                }            });</code></pre><p>这样进入到了f()；</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15747392256010bkmp8kj.png?imageslim" alt="接口请求" title>                </div>                <div class="image-caption">接口请求</div>            </figure>这里走了一个请求domain的接口，请求成功后 调用了<pre><code>ConfigUtil.getInstance().save(com.niming.douyin.a.a.k, domain);this.a.d();</code></pre><p>保存了一下地址，然后调用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1574739377762peyxjtbd.png?imageslim" alt="d方法" title>                </div>                <div class="image-caption">d方法</div>            </figure><p>这里是先验证一下设备有没有注册过，如果注册过，直接登录，没有注册过，先注册。在几次测试中发现，这个手机设备号在第一次注册就存入到数据库，再次进入会取之前的数据，限制3次就是从这个设备号查出来的。通过抓取接口发现 当满三次的时候，并不会返回成功的数据，所以无法拿到地址。只能通过重新注册获取这免费的三次机会。<br>所以要hook下这个配置文件，获取是否注册的时候 返回false,重新注册，获取设备号的时候 随机一个，避免重复。</p><pre><code>XposedHelpers.findAndHookMethod(&quot;com.niming.framework.basedb.ConfigUtil&quot;, cl, &quot;getString&quot;, String.class, new XC_MethodHook() {               @Override               protected void afterHookedMethod(MethodHookParam param) throws Throwable {                   super.afterHookedMethod(param);                   if (param.args[0].equals(&quot;device_id&quot;)) {                       //随机id                       String deviceId = String.valueOf(UUID.randomUUID().toString());                       param.setResult(deviceId);                   }               }           });           XposedHelpers.findAndHookMethod(&quot;com.niming.framework.basedb.ConfigUtil&quot;, cl, &quot;getBooleanValue&quot;, String.class, new XC_MethodHook() {               @Override               protected void afterHookedMethod(MethodHookParam param) throws Throwable {                   super.afterHookedMethod(param);                   if (param.args[0].toString().equals(&quot;is_device_register&quot;)) {                       param.setResult(false);                   }               }           });</code></pre><p> 这样每次都会重新注册获取免费的三次机会。</p><p> 在测试过程中发现 新注册后会跳转到广告页SplashAdActivity，这个界面有个延时操作，很麻烦。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1574739919684tpmiffl4.png?imageslim" alt="paste image" title>                </div>                <div class="image-caption">paste image</div>            </figure><p> d 默认值给了5秒。</p><p> <img src="http://res.zhangyongfa888.site/1574738616032hnr8mqrb.png?imageslim" alt="paste image"></p><p> 给他强制跳转，代码中有个方法</p><pre><code>private void b() {  MainActivity.a(this.activity);  finish(); }</code></pre><p>直接能够调用~</p><pre><code>XposedHelpers.findAndHookMethod(&quot;com.niming.douyin.ui.splash.SplashAdActivity&quot;, cl, &quot;initView&quot;, Bundle.class, new XC_MethodHook() {                @Override                protected void afterHookedMethod(MethodHookParam param) throws Throwable {                    super.afterHookedMethod(param);                    //去广告                    XposedHelpers.callMethod(param.thisObject, &quot;b&quot;);                }            });</code></pre><p>  这样跳转的时候就能够忽略延时广告，直接跳转了。</p><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p> 在网络请求测试中发现数据是加密的，当然代码都拿到了，还怕拿不到密码?</p><p> <img src="http://res.zhangyongfa888.site/1574740226439334kyswr.png?imageslim" alt="paste image"></p><p> 这里有个密码，有点兴奋，but不可能这么明显八。<br> 反码了几次发现不对哦。</p><p> <img src="http://res.zhangyongfa888.site/1574740379223q0xtaah2.png?imageslim" alt="paste image"></p><p> ennnnn….</p><p> <img src="http://res.zhangyongfa888.site/15747404106784nunurai.png?imageslim" alt="paste image"></p><p> e….<br> 我觉得这个TextUtils肯定用到了，戳进去发现是Jni……</p><p> <img src="http://res.zhangyongfa888.site/15747404783875zvrt4ei.png?imageslim" alt="paste image"></p><p> 不过没关系。有工具！<br> 找到lib中的security,拖到这个小姐姐身上</p><p> <img src="http://res.zhangyongfa888.site/1574740508509gp2em7qi.png?imageslim" alt="paste image"></p><p> <img src="http://res.zhangyongfa888.site/1574740583821kpcxtftj.png?imageslim" alt="paste image"></p><p> 很明显 仅仅返回的是字符串。从java代码看，应该是不同的环境需要不同的密码取转码。</p><p> <img src="http://res.zhangyongfa888.site/1574740608262698vd2bv.png?imageslim" alt="paste image"></p><p> 解下数据，这波操作可以。</p><p> <img src="http://res.zhangyongfa888.site/15747407282150bk9c3qh.png?imageslim" alt="paste image"></p><h4 id="0x"><a href="#0x" class="headerlink" title="0x??"></a>0x??</h4><p> __ //todo __</p><p> 1.三次后自动注册一次 确保一直有次数</p><p> 2.暴力寻找vip的uuid</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;0X01&quot;&gt;&lt;a href=&quot;#0X01&quot; class=&quot;headerlink&quot; title=&quot;0X01&quot;&gt;&lt;/a&gt;0X01&lt;/h4&gt;&lt;p&gt;无意间发现一款老司机应用，用起来还不错，但是可恶的是有次数限制。怒。于是念念不忘，要破了他！&lt;/p&gt;
&lt;h4 id=&quot;0x0
      
    
    </summary>
    
      <category term="逆向" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/"/>
    
      <category term="Xposed" scheme="http://zhangyongfa888.site/categories/%E9%80%86%E5%90%91/Xposed/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>TINKER 集成</title>
    <link href="http://zhangyongfa888.site/2019/11/04/Tinker%E9%9B%86%E6%88%90/"/>
    <id>http://zhangyongfa888.site/2019/11/04/Tinker集成/</id>
    <published>2019-11-04T08:44:00.000Z</published>
    <updated>2020-03-04T07:52:54.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TINKER-集成"><a href="#TINKER-集成" class="headerlink" title="TINKER 集成"></a>TINKER 集成</h1><h2 id="Tinker是啥"><a href="#Tinker是啥" class="headerlink" title="Tinker是啥"></a>Tinker是啥</h2><p>Tinker是微信官方的Android热补丁解决方案，它支持动态下发代码、So库以及资源，让应用能够在不需要重新安装的情况下实现更新。当然，你也可以使用Tinker来更新你的插件。<a href https: github.com tencent tinker"">Tinker Github</a></p><h3 id="为什么使用Tinker"><a href="#为什么使用Tinker" class="headerlink" title="为什么使用Tinker"></a>为什么使用Tinker</h3><p>当前市面的热补丁方案有很多，其中比较出名的有阿里的AndFix、美团的Robust以及QZone的超级补丁方案。但它们都存在无法解决的问题，这也是正是我们推出Tinker的原因。如下，就可以知道Tinker的强大之处。</p><table><thead><tr><th align="center"></th><th align="center">Tinker</th><th align="center">QZone</th><th align="center">AndFix</th><th align="center">Robust</th></tr></thead><tbody><tr><td align="center">类替换</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">So替换</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">资源替换</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">全平台支持</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">yes</td></tr><tr><td align="center">即时生效</td><td align="center">no</td><td align="center">no</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">性能损耗</td><td align="center">较小</td><td align="center">较大</td><td align="center">较小</td><td align="center">较小</td></tr><tr><td align="center">补丁包大小</td><td align="center">较小</td><td align="center">较大</td><td align="center">一般</td><td align="center">一般</td></tr><tr><td align="center">开发透明</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">复杂度</td><td align="center">较低</td><td align="center">较低</td><td align="center">复杂</td><td align="center">复杂</td></tr><tr><td align="center">Rom体积</td><td align="center">Dalvik较大</td><td align="center">较小</td><td align="center">较小</td><td align="center">较小</td></tr><tr><td align="center">成功率</td><td align="center">较高</td><td align="center">较高</td><td align="center">一般</td><td align="center">最高</td></tr></tbody></table><h3 id="Tinker的已知问题"><a href="#Tinker的已知问题" class="headerlink" title="Tinker的已知问题"></a>Tinker的已知问题</h3><p>由于原理与系统限制，Tinker有以下已知问题：</p><p>Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件</p><p>由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；</p><p>在Android N上，补丁对应用启动时间有轻微的影响；</p><p>不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；</p><p>对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</p><h2 id="Tinker集成过程（使用bugly集成）"><a href="#Tinker集成过程（使用bugly集成）" class="headerlink" title="Tinker集成过程（使用bugly集成）"></a>Tinker集成过程（使用bugly集成）</h2><p>项目工程的.gradle 中添加</p><pre><code>classpath &quot;com.tencent.bugly:tinker-support:1.2.0&quot;</code></pre><p>app的.gradle中添加</p><pre><code>implementation &apos;com.tencent.bugly:crashreport_upgrade:1.4.2&apos;implementation &apos;com.tencent.tinker:tinker-android-lib:1.9.14&apos;</code></pre><p>应用bugly配置好的gradle文件</p><pre><code>apply from: &apos;tinker-support.gradle&apos;</code></pre><p> <img src="http://res.zhangyongfa888.site/1572852444001uf3oaut6.png?imageslim" alt="app gradle 结构"></p><p>tinker-support.gradle 代码</p><pre><code>apply plugin: &apos;com.tencent.bugly.tinker-support&apos;def bakPath = file(&quot;${buildDir}/bakApk/&quot;)/** * 此处填写每次构建生成的基准包目录 */def baseApkDir = &quot;huozhu-1104-11-36-34&quot;/*** 对于插件各参数的详细解析请参考*/tinkerSupport {    // 开启tinker-support插件，默认值true    enable = true  // 指定归档目录，默认值当前module的子目录tinker   autoBackupApkDir = &quot;${bakPath}&quot;   // 是否启用覆盖tinkerPatch配置功能，默认值false   // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch  overrideTinkerPatchConfiguration = true   // 编译补丁包时，必需指定基线版本的apk，默认值为空   // 如果为空，则表示不是进行补丁包的编译   // @{link tinkerPatch.oldApk }    baseApk = &quot;${bakPath}/${baseApkDir}/huozhu-release.apk&quot;   // 对应tinker插件applyMapping   baseApkProguardMapping = &quot;${bakPath}/${baseApkDir}/huozhu-release-mapping.txt&quot;   // 对应tinker插件applyResourceMapping  baseApkResourceMapping = &quot;${bakPath}/${baseApkDir}/huozhu-release-R.txt&quot;  // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性   tinkerId = &quot;base_11.04.11.49&quot;  // 构建多渠道补丁时使用  // buildAllFlavorsDir = &quot;${bakPath}/${baseApkDir}&quot;  // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持） // isProtectedApp = true  // 是否开启反射Application模式  enableProxyApplication = false  // 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件） supportHotplugComponent = true}/** * 一般来说,我们无需对下面的参数做任何的修改 * 对于各参数的详细介绍请参考: * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97 */tinkerPatch {//oldApk =&quot;${bakPath}/${appName}/app-release.apk&quot;     ignoreWarning = false     useSign = true     dex {         dexMode = &quot;jar&quot;         pattern = [&quot;classes*.dex&quot;]         loader = []     }     lib {         pattern = [&quot;lib/*/*.so&quot;]     }     res {          pattern = [&quot;res/*&quot;, &quot;r/*&quot;, &quot;assets/*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;]          ignoreChange = []          largeModSize = 100      }   packageConfig {   }  sevenZip {      zipArtifact = &quot;com.tencent.mm:SevenZip:1.1.10&quot;    //        path = &quot;/usr/local/bin/7za&quot;    }   buildConfig {      keepDexApply = false      //tinkerId = &quot;1.0.1-base&quot;      //applyMapping = &quot;${bakPath}/${appName}/app-release-mapping.txt&quot; //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式    //applyResourceMapping = &quot;${bakPath}/${appName}/app-release-R.txt&quot; // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配   }}</code></pre><p> 配置application</p><p> 新建SampleApplicationLike 继承自DefaultApplicationLike ,开启反射application模式</p><pre><code>enableProxyApplication = false   //tinker-support.gradle 中的配置</code></pre><p> 在onBaseContextAttached 添加MultiDex 和Tinker</p><pre><code>public void onBaseContextAttached(Context base) {    super.onBaseContextAttached(base);   // you must install multiDex whatever tinker is installed!   MultiDex.install(base);   // 安装tinker  TinkerManager.installTinker(this);}</code></pre><p>应用的Application 继承自TinkerApplication 并重写默认构造方法<br>    public MyApplication() {<br>        super(ShareConstants.TINKER_ENABLE_ALL, “xx.xx.SampleApplicationLike”,<br>                “com.tencent.tinker.loader.TinkerLoader”, false);<br>    }</p><h2 id="Tinker-生成插件包-可使用bugly中的tinker-support"><a href="#Tinker-生成插件包-可使用bugly中的tinker-support" class="headerlink" title="Tinker 生成插件包(可使用bugly中的tinker-support)"></a>Tinker 生成插件包(可使用bugly中的tinker-support)</h2><p>先生成基准包，也就是上线后有bug的包；默认在build/bakApk 中 assemble一次就会生成一次</p><p>基准包目录结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15728533899301u1llzje.png?imageslim" alt="目录结构" title>                </div>                <div class="image-caption">目录结构</div>            </figure><p>huozhu-release.apk 因为是组件化的目录结构 所以是huozhu-release.apk 而不是app-release.apk 而且注意 tinker-support.gradle 配置的指定文件名称是否一致;</p><p>huozhu-release-mapping.txt :开启混淆后会生成mapping文件</p><p>基准包生成后将 地址 复制到配置中</p><pre><code>/*** 此处填写每次构建生成的基准包目录*/def baseApkDir = &quot;huozhu-1104-11-36-34&quot;</code></pre><p>同时指定一个唯一的tinkerId 可以理解为 每一次打补丁包都要指定一个tinkerId </p><p>修改部分代码 然后执行生成补丁</p><p> <img src="http://res.zhangyongfa888.site/1572853788363w411qfuz.png?imageslim" alt="生成补丁"></p><p>因为是bugly中的tinker 所以直接使用tinker-support中的buildTinkerPatchRelease ，在outputs根目录生的patch生成了可用补丁</p><p>如果是tinker中的tinkerPatchRelease 则在outputs/apk/tinkerPatch中生成了补丁</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/15728539817374saenorw.png?imageslim" alt="插件目录" title>                </div>                <div class="image-caption">插件目录</div>            </figure><h2 id="加载补丁包"><a href="#加载补丁包" class="headerlink" title="加载补丁包"></a>加载补丁包</h2><p>在app首页或者任意位置去加载补丁包</p><p>这里封装了一下下载补丁的方法 直接调用即可</p><pre><code>PatchUtils.getInstance().checkPatch(context);</code></pre><p>核心方法是</p><pre><code>TinkerInstaller.onReceiveUpgradePatch(context, file.getAbsolutePath());</code></pre><p>Tinker中已经有各种判断 补丁是否正确等判断，所以直接加载就可以。</p><p>加载监听：</p><pre><code>TinkerManager.getInstance().setTinkerListener(new TinkerManager.TinkerListener() {        @Override        public void onDownloadSuccess(String s) {            Log.d(&quot;onDownloadSuccess&quot;, s);        }        @Override        public void onDownloadFailure(String s) {            Log.d(&quot;onDownloadFailure&quot;, s);        }        @Override        public void onPatchStart() {        }        @Override        public void onApplySuccess(String s) {            Log.d(&quot;onApplySuccess&quot;, s);            Toast.makeText(context, &quot;更新完成 即将重启&quot;, Toast.LENGTH_SHORT).show();            new Handler().postDelayed(new Runnable() {                @Override                public void run() {                    PackageManager packageManager = context.getPackageManager();                    Intent intent = packageManager.getLaunchIntentForPackage(context.getPackageName());                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    context.startActivity(intent);                    AppUtils.exitApp(context);                    System.exit(0);                }            }, 2000);        }        @Override        public void onApplyFailure(String s) {            Log.d(&quot;onApplyFailure&quot;, s);        }        @Override        public void onPatchRollback() {        }    });</code></pre><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1.当项目中含有第三方lib库时候，加载补丁会报错</p><pre><code>java.lang.UnsatisfiedLinkError: Shared library &quot;/data/app/***-3IhVXmnAlMEQk_hwO6_0Mg==/lib/arm/libc++_shared.so&quot; already opened by ClassLoader</code></pre><p>解决办法：第三方库加载前，有tinker加载</p><pre><code>TinkerLoadLibrary.loadArmLibrary(getApplication(), &quot;BaiduMapSDK_base_v6_0_0&quot;);TinkerLoadLibrary.loadArmLibrary(getApplication(), &quot;BaiduMapSDK_map_v6_0_0&quot;);TinkerLoadLibrary.loadArmLibrary(getApplication(), &quot;BaiduTraceSDK_v3_0_7&quot;);</code></pre><p>2.新添加的activity 找不到声明</p><pre><code>基础包必须设置supportComponent=true，并且新增Activity的Exported属性必须为false。</code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>如何对多渠道、加固包等做处理，以及<strong>少扣绩效</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TINKER-集成&quot;&gt;&lt;a href=&quot;#TINKER-集成&quot; class=&quot;headerlink&quot; title=&quot;TINKER 集成&quot;&gt;&lt;/a&gt;TINKER 集成&lt;/h1&gt;&lt;h2 id=&quot;Tinker是啥&quot;&gt;&lt;a href=&quot;#Tinker是啥&quot; class=&quot;
      
    
    </summary>
    
      <category term="热更新" scheme="http://zhangyongfa888.site/categories/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
      <category term="Tinker" scheme="http://zhangyongfa888.site/categories/%E7%83%AD%E6%9B%B4%E6%96%B0/Tinker/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>测试点击事件</title>
    <link href="http://zhangyongfa888.site/2019/09/09/%E6%B5%8B%E8%AF%95%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://zhangyongfa888.site/2019/09/09/测试点击事件/</id>
    <published>2019-09-09T07:51:17.000Z</published>
    <updated>2020-07-10T07:47:40.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算工具"><a href="#计算工具" class="headerlink" title="计算工具"></a>计算工具</h2><h3 id="——————————————————————"><a href="#——————————————————————" class="headerlink" title="——————————————————————"></a>——————————————————————</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tool.lu/netcard/" alt="IP签名" title>                </div>                <div class="image-caption">IP签名</div>            </figure><img src="https://tool.lu/netcard/">### 选择开始时间<body><input type="date" name="date" id="date" min="2014-01-01" max="2099-01-01" value="2018-08-08"><br><br><button style="font-size:20px;padding-left:20px;padding-right:20px;" onclick="a()">计算</button><script>    function a() {        var current = new Date();        var currentYear = current.getFullYear();        var currentMonth = current.getMonth() + 1;        var currentDay = current.getDate();        var currentDate = currentYear + "-" + (currentMonth < 10 ? "0" + currentMonth : currentMonth + "") + "-" + (currentDay < 10 ? "0" + currentDay : currentDay + "");        var v = document.getElementById("date").value;        var choose = new Date(v);        var chooseYear = choose.getFullYear();        var chooseMonth = choose.getMonth() + 1;        var chooseDay = choose.getDate();        var cha = currentYear - chooseYear;        // var cha = (current.getTime() - choose.getTime()) / 1000 / 60 / 60 / 24 / 365;        // var cha=parseInt(cha);        // var lit = cha - intCha;        // alert(cha)        // if(intCha==3){        // }        var realYear = (current.getTime() - choose.getTime()) / 1000 / 60 / 60 / 24 / 365;        if (cha <= 0 ) {            alert("入职不满一年！")        } else if (cha == 1 || cha == 2) {//1-2年 3天年假            //计算天数            if(realYear < 1){                alert("入职不满一年：" + realYear )            }else{            alert("入职满" + cha + "年！有3天年假")            }        } else if (cha == 3) { //3年以上5天年假            if (realYear > 3) {//真满3年                var startDate = currentYear + "-01-01";                var endDate = currentYear + "-" + chooseMonth + "-" + chooseDay;                var chaDay = (new Date(endDate).getTime() - new Date(startDate).getTime()) / 1000 / 60 / 60 / 24;                var allDay = 3 * chaDay / 365 + 5 * (365 - chaDay) / 365;                alert("入职满" + cha + "年！" + allDay)            } else {                alert("入职满" + realYear + "年！有3天年假")            }        } else if (cha == 4 || cha == 5 || cha >= 6) {            alert("入职满" + cha + "年！有5天年假")        }        // alert(v + "\n" + currentDate);    }</script><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"scale":1,"hHeadPos":0.5,"vHeadPos":0.618,"jsonPath":"/live2dw/assets/shizuku.model.json"},"display":{"superSample":2,"width":150,"height":300,"position":"left","hOffset":0,"vOffset":-20},"mobile":{"show":false,"scale":0.5},"react":{"opacityDefault":0.7,"opacityOnHover":0.2},"log":false,"tagMode":false});</script></body>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算工具&quot;&gt;&lt;a href=&quot;#计算工具&quot; class=&quot;headerlink&quot; title=&quot;计算工具&quot;&gt;&lt;/a&gt;计算工具&lt;/h2&gt;&lt;h3 id=&quot;——————————————————————&quot;&gt;&lt;a href=&quot;#——————————————————————&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android唯一识别码 获取</title>
    <link href="http://zhangyongfa888.site/2019/08/28/Android%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81-%E8%8E%B7%E5%8F%96/"/>
    <id>http://zhangyongfa888.site/2019/08/28/Android唯一识别码-获取/</id>
    <published>2019-08-28T03:52:00.000Z</published>
    <updated>2019-09-03T00:21:58.737Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>目前有个需求，需要获取设备的唯一识别码 标记用户的手机,在android低版本上很好实现，imei或者deviceID之间能够拿到，但是android10已经不给此项权限了……于是开始找资料。</p><h3 id="不可重置的设备标识符-：官（墙）方（外）推荐方法"><a href="#不可重置的设备标识符-：官（墙）方（外）推荐方法" class="headerlink" title="不可重置的设备标识符 ：官（墙）方（外）推荐方法"></a>不可重置的设备标识符 ：官（墙）方（外）推荐方法</h3><p>从 Android Q 开始，应用必须具有 <strong>READ_PRIVILEGED_PHONE_STATE</strong> 特许权限才能访问设备的不可重置标识符（包含 IMEI 和序列号）。许多用例不需要不可重置的设备标识符。如果您的应用没有该权限，但您仍尝试查询标识符的相关信息，则平台的响应会因目标 SDK 版本而异：</p><p>如果应用以 <strong>Android Q</strong> 为目标平台，则会发生 <strong>SecurityException</strong>。<br>如果应用以 Android 9（API 级别 28）或更低版本为目标平台，则相应方法会返回 null 或占位符数据（如果应用具有 <strong>READ_PHONE_STATE</strong> 权限）。否则，会发生 <strong>SecurityException</strong>。<br>注意：如果您的应用是设备所有者或配置文件所有者应用，那么即使您的应用以 Android Q 为目标平台，您也只需 <strong>READ_PHONE_STATE</strong> 权限即可访问不可重置的设备标识符。此外，如果您的应用具有特殊运营商权限，则无需任何权限即可访问这些标识符。<br>如果您的应用将不可重置的设备标识符用于广告跟踪或用户分析目的，请为这些特定用例创建 Android 广告 ID。要了解详情，请参阅唯一标识符的最佳做法。<a href="https://developer.android.google.cn/training/articles/user-data-ids" target="_blank" rel="noopener">https://developer.android.google.cn/training/articles/user-data-ids</a></p><p>另一篇文章有讲解如何获取广告id :<a href="https://www.jianshu.com/p/33cfb817a077" target="_blank" rel="noopener">Google Advertising Id 获取</a></p><p>但是还需要注册谷歌开发者 申请谷歌广告的id</p><pre><code>The Google Mobile Ads SDK was initialized incorrectly. AdMob publishers    should follow the instructions here:                                   https://googlemobileadssdk.page.link/admob-android-update-manifest         to add a valid App ID inside the AndroidManifest.                         Google Ad Manager publishers should follow instructions here:              https://googlemobileadssdk.page.link/ad-manager-android-update-manifest.  </code></pre><p>最后放弃了~</p><h3 id="国内-设备获取设备标识符"><a href="#国内-设备获取设备标识符" class="headerlink" title="国内 设备获取设备标识符"></a>国内 设备获取设备标识符</h3><p><a href="https://www.tc260.org.cn" target="_blank" rel="noopener">全国信息安全标准化技术委员会</a>  有<a href="https://www.tc260.org.cn/front/postDetail.html?id=20190808111821" target="_blank" rel="noopener">《信息安全技术 移动互联网应用（App）收集个人信息基本规范（草案）》，</a> 规定了地图导航、网络约车、即时通讯、博客论坛、网络支付、新闻资讯、网上 购物等 21 种常用服务类型可收集的最少信息。</p><h5 id="App-收集个人信息基本要求"><a href="#App-收集个人信息基本要求" class="headerlink" title="App 收集个人信息基本要求"></a>App 收集个人信息基本要求</h5><h6 id="管理要求"><a href="#管理要求" class="headerlink" title="管理要求"></a>管理要求</h6><p>App收集个人信息应满足以下管理要求：</p><ul><li>a） App 运营者应履行个人信息保护义务，采取必要安全措施，保障用户个人信息安全。</li><li>b） 当用户同意 App 收集某服务类型的最少信息时，App 不得因用户拒绝提供最少信息 之外的个人信息而拒绝提供该类型服务。 注：附录 A 列举了 App 常见的服务类型以及服务类型对应的最少信息。 </li><li>c） App 不得收集与所提供的服务无关的个人信息。 </li><li>d） 对外共享、转让个人信息前，App 应事先征得用户明示同意。当用户不同意, 则不 得对外共享、转让用户个人信息。</li><li>e） App 不得收集不可变更的设备唯一标识（如 IMEI 号、MAC 地址等） ，用于保障网络 安全或运营安全的除外。</li><li>f） 用户明确拒绝使用某服务类型后，App 不得频繁（如每 48 小时超过一次）征求用 户同意使用该类型服务，并保证其他服务类型正常使用。</li><li>g） App 应对其使用的第三方代码、插件的个人信息收集行为负责。第三方代码、插件 收集个人信息视同 App 收集，App 应防止第三方代码、插件收集无关的个人信息。 注：如第三方代码、插件自行向用户明示其收集、使用个人信息的目的、方式、范围，并征得用户同意，则第三方代码、插件独立对其个人信息收集行为承担责任。</li></ul><h6 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h6><p>App收集个人信息应满足以下技术要求：</p><ul><li>a） 当收集的个人信息超出服务类型的最少信息时，超出部分的个人信息，App 应逐项 征得用户明示同意。</li><li>b） 当同一 App 有 2 种或 2 种以上服务类型时，App 应允许用户逐项开启和退出服务类 型，开启或退出的方式应易于操作。</li><li>c） 当用户退出某服务类型后，App 应终止该服务类型收集个人信息的活动，并对仅用 于该服务的个人信息进行删除或匿名化处理。</li><li>d） 当申请个人信息相关权限或要求用户输入个人信息时，App 应向用户同步明示申请 权限或收集信息的目的。</li><li>e） App 应向用户提供实时查询已收集个人信息类型的功能；查询结果应以独立界面展 示，且查询方式应易于操作。</li><li>f） 存在对外共享、转让个人信息的，App 应向用户提供查询数据接收方身份的功能； 查询结果应以独立界面展示，且查询方式应易于操作。 </li><li>g） 在技术可行且不影响终端和服务正常的情况下，App 应优先在用户终端中存储、使 用所收集的个人信息。 </li><li>h） App 应以实现服务所必需的最低合理频率向后台服务器发送个人信息。</li></ul><p><strong>所以这么严格，相关部门肯定会有一个规范来统一下发或者管理手机的唯一识别码，来达到“监管”用户的操作</strong></p><h2 id="规范来了"><a href="#规范来了" class="headerlink" title="规范来了~"></a>规范来了<del>~</del></h2><h1 id="移动智能终端补充设备标识体系"><a href="#移动智能终端补充设备标识体系" class="headerlink" title="移动智能终端补充设备标识体系"></a>移动智能终端补充设备标识体系</h1><h4 id="移动安全联盟"><a href="#移动安全联盟" class="headerlink" title="移动安全联盟"></a><a href="http://www.msa-alliance.cn/" target="_blank" rel="noopener">移动安全联盟</a></h4><h6 id="移动安全联盟-Mobile-Security-Alliance，简称MSA-于2017年12月4日成立，由中国信息通信研究院联合终端生产企业、安全企业、高等院校、研究机构、互联网企业以及芯片企业、方案企业等产业链中各个环节的重要机构共同发起。"><a href="#移动安全联盟-Mobile-Security-Alliance，简称MSA-于2017年12月4日成立，由中国信息通信研究院联合终端生产企业、安全企业、高等院校、研究机构、互联网企业以及芯片企业、方案企业等产业链中各个环节的重要机构共同发起。" class="headerlink" title="移动安全联盟(Mobile Security Alliance，简称MSA)于2017年12月4日成立，由中国信息通信研究院联合终端生产企业、安全企业、高等院校、研究机构、互联网企业以及芯片企业、方案企业等产业链中各个环节的重要机构共同发起。"></a>移动安全联盟(Mobile Security Alliance，简称MSA)于2017年12月4日成立，由中国信息通信研究院联合终端生产企业、安全企业、高等院校、研究机构、互联网企业以及芯片企业、方案企业等产业链中各个环节的重要机构共同发起。</h6><p>由各大手机厂商”共同维护”来进行统一、规范化唯一识别码，目前包括的手机厂商有</p><table><thead><tr><th>厂商</th><th>版本</th></tr></thead><tbody><tr><td>小米</td><td>MIUI10.2 及以上</td></tr><tr><td>vivo</td><td>FuntouchOS 9 及以上</td></tr><tr><td>华为</td><td>全版本</td></tr><tr><td>OPPO</td><td>Color OS 7.0 及以上（9 月份正式支持）</td></tr><tr><td>Lenovo</td><td>ZUI 11.4 及以上（9 月中旬正式支持）</td></tr></tbody></table><h4 id="体系说明"><a href="#体系说明" class="headerlink" title="体系说明"></a>体系说明</h4><p>移动智能终端补充设备标识体系架构共涉及四类实体，包括开发者、开发者开发的应用软件、移动智能终端设备的操作系统、用户及用户使用的设备。为保护用户用户的隐私和标识设备的唯一性，根据不同使用对象和不同用途，基于移动智能终端设备，分别生成设备唯一标识符、匿名设备标识符、开发者匿名设备标识符和应用匿名设备标识符，将这四个设备标识符构成补充设备标识体系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://res.zhangyongfa888.site/1566971512579e8ffjhsp.png?imageslim" alt="体系图" title>                </div>                <div class="image-caption">体系图</div>            </figure><p>唯一标识符作为普通用户仍然是拿不到，但是能够替代的，我们可以用其他的id,</p><ul><li>OAID 可与用户数据、账号绑定 用于个性化推荐、广告业务。</li><li>VAID 多应用之间能够共享的唯一标识，同一个开发者多个应用可以使用，举个例子：司机端和货主端 ，货主端发货刷单，司机端抢单时候可以用vaid判断，是否是同一台设备；缺点是必须是该手机平台的线上应用才能统计到是否是同一个开发者账号下的app,部分厂商，若应用未在其开发者平台后台上架，则认定未非法应用，无 法生成 VAID，手机 LOG 中将会有相关异常值输出。 </li><li>AAID 单个app用于用户统计等，没有VAID的需求情况下 可以使用。</li></ul><p>目前移动安全联盟 仍在免费注册阶段，还没有收费制服。作为旁观者，还是尽早注册，毕竟中国的手机市场很大，而且如上的通过谷歌广告的形式获取唯一识别码走不通，利润可想而知。</p><h5 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h5><p><a href="http://www.msa-alliance.cn/" target="_blank" rel="noopener">移动安全联盟</a></p><p><a href="https://www.tc260.org.cn" target="_blank" rel="noopener">全国信息安全标准化技术委员会</a></p><p><a href="https://developer.android.google.cn/preview/privacy/data-identifiers#device-ids" target="_blank" rel="noopener">谷歌官方文档</a></p><p><a href="https://dev.mi.com/console/doc/detail?pId=1821" target="_blank" rel="noopener">小米设备标识体系的说明</a></p><p><a href="https://www.jianshu.com/p/33cfb817a077" target="_blank" rel="noopener">Google Advertising Id 获取</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;目前有个需求，需要获取设备的唯一识别码 标记用户的手机,在android低版本上很好实现，imei或者deviceID之间能够拿到，但是an
      
    
    </summary>
    
      <category term="Android" scheme="http://zhangyongfa888.site/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Awesome-android-tips</title>
    <link href="http://zhangyongfa888.site/2019/08/23/Awesome-android-tips/"/>
    <id>http://zhangyongfa888.site/2019/08/23/Awesome-android-tips/</id>
    <published>2019-08-23T07:20:00.000Z</published>
    <updated>2020-03-04T07:52:54.762Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/title.png" alt title>                </div>                <div class="image-caption"></div>            </figure> <br><br><p><a href="https://github.com/jiang111/awesome-android-tips" target="_blank" rel="noopener"><img src="https://jiang111.github.io/images/awesome.svg" alt="jiang111/image"></a>   <a href="https://juejin.im/entry/57ad3f87c4c9710054687895/detail" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/57ad3f87c4c9710054687895/likes.svg?style=plastic" alt></a><br><br></p><p>EnglishVersion -&gt;_-&gt;:<a href="https://github.com/jiang111/awesome-android-tips/blob/master/README-en.md" target="_blank" rel="noopener">https://github.com/jiang111/awesome-android-tips/blob/master/README-en.md</a></p><p>值得收藏的AS插件 -&gt;_-&gt;:<a href="https://github.com/jiang111/awesome-androidstudio-plugins" target="_blank" rel="noopener">https://github.com/jiang111/awesome-androidstudio-plugins</a> <br></p><p>这里收集了大家常用的一些Android代码,持续更新中,内容来自自己的平时积累和网络上看到的文章，部分原文地址在最下方。如有错误欢迎指正,如有侵权,请联系我删除。里面可能会有重复内容,请忽略或者提醒我删除。<br><br></p><h1 id><a href="#" class="headerlink" title></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/toc.png" alt="Table of Contents" title>                </div>                <div class="image-caption">Table of Contents</div>            </figure></h1><ul><li><p>setBackgroundResource(0) 可以移除 View 的背景色</p></li><li><p>Resources.getSystem().getDisplayMetrics().density 可以不用 Context 也能获取屏幕密度哦</p></li><li><p>通过重载 ViewGroup 的 dispatchDraw 可以实现一个简单的蒙版效果。 例如下拉刷新时，可以在 contentView 上加一层遮罩。 canvas.drawRect(0, mContentView.getTranslationY(), getWidth(), getHeight(), mMaskPaint);</p></li><li><p>new 出来的 View 可以用 View.generateViewId() （API 17 以上可用）   生成 id，系统保证唯一</p></li><li><p>使用 GridView时 android:padding 和 android:clipToPadding=”false” 配合使用效果更好哦。</p></li><li><p>在布局文件中，如果只是为了占位，可以用 Space 来取代 View。 最棒的一点是Space可以跳过 Draw 这个过程。</p></li><li><p>TypedValue.applyDimension(int unit, float value, DisplayMetrics metrics) 方便dp, px, sp 之间的转换。</p></li><li><p>Activity.startActivities() 这个方法最直接的理解就是使用intent开启多个Activity</p></li><li><p>TextUtils.isEmpty() 如果传入的String 为NULL或者Length为0的话就返回 true。</p></li><li><p>Html.fromHtml() 如果你对Html熟悉的话，可以很迅速通过这个方法处理一些富文本操作。比如超链接和图文排版等处理。</p></li><li><p>TextView.setError() 设置文本框错误提醒</p></li><li><p>Build.VERSION_CODES 有些时候我们的app需要根据不同的SDK版本进行执行不同的操作</p></li><li><p>PhoneNumberUtils.convertKeypadLettersToDigits 这个方法简单粗暴，会将输入的字母根据键盘上的映射转换为数字。</p></li><li><p>ArgbEvaluator ArgbEvaluator.evaluate(float fraction, Object startValue, Object endValue);根据一个起始颜色值和一个结束颜色值以及一个偏移量生成一个新的颜色，分分钟实现类似于微信底部栏滑动颜色渐变。</p></li><li><p>ValueAnimator.reverse() 顺畅的取消动画效果</p></li><li><p>DateUtils.formatDateTime()) 这个方法可以输出相应格式化的时间或者日期</p></li></ul><ul><li><p>Pair 这个类 可以用来存储存储一”组”数据。但不是key和value的关系。</p></li><li><p>SparseArray 目前有很多地方从性能优化方说使用SparseArray来替换hashMap，来节省内存，提高性能。</p></li><li><p>Linkify.addLinks() 这个类可以更方便的为文本添加超链接。</p></li><li><p>android.media.ThumbnailUtils这个类主要是用来处理缩略图相关的工作,比如:用来获取媒体（图片、视频）的缩略图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createVideoThumbnail(String filePath, int kind)</span><br><span class="line">extractThumbnail(Bitmap source, int width, int height)</span><br></pre></td></tr></table></figure></li><li><p>Bitmap.extractAlpha ();返回一个新的Bitmap，capture原始图片的alpha值。有的时候我们需要动态的修改一个元素的背景图片又不希望使用多张图片的时候，通过这个方法，结合Canvas和Paint可以动态的修改一个纯色Bitmap的颜色。</p></li><li><p>模块间有消息需要传递时，使用LocalBroadcastManager替代Listener进行模块解耦。除了解耦，这样发送消息和执行消息差一个线程循环，可以减小方法的调用链，我这就碰到一次方法调用链太长导致StackOverflow的问题。</p></li><li><p>静态变量不要直接或者间接引用Activity、Service等。这会使用Activity以及它所引用的所有对象无法释放，然后，用户操作时间一长，内存就会狂升。</p></li><li><p>Handler机制有一个特点是不会随着Activity、Service的生命周期结束而结束。也就是说，如果你Post了一个Delay的Runnable，然后在Runnable执行之前退出了Activity，Runnable到时间之后还是要执行的。如果Runnable里面包含更新View的操作，可能会造成内存泄露,所以可以在 onDestory() 的时候调用removeCallbacksAndMessages来移除这个Handler所对应等待执行的message。</p></li><li><p>不少人在子线程中更新View时喜欢使用Context.runOnUiThread，这个方法有个缺点，就是一但Context生命周期结束，比如Activity已经销毁时，一调用就会崩溃。</p></li><li><p>SharedPreferences.Editor.commit这个方法是同步的，一直到把数据同步到Flash上面之后才会返回，由IO操作的不可控，尽量使用apply方法代替。apply只在API Level&gt;=9才会支持，需要做兼容。不过，最新的 <code>support v4</code> 包已经为我们做好了处理，使用  <code>SharedPreferencesCompat.EditorCompat.getInstance().apply(editor)</code> 即可。</p></li><li><p>PackageManager.getInstalledPackages这个方法经常使用，你可能不知道，当获取的结果数量比较多的时候，在某些机型上面调用它花费的时间可能秒级的，所以尽量在子线程中使用。另外，如果结果太多，超过系统设置的Binder数据最大传输量的上限，则会发生TransactionException，如果你使用这个方法获取机器上的己安装应用列表，最好做一下预防。</p></li><li><p>如果使用Context.startActivity启动外部应用，最好做一下异常预防，因为寻找不到对应的应用时，会抛出异常。如果你要打开的是应用内的Activity，不防使用显式Intent，这样能提高系统搜索目标Activity的效率。</p></li><li><p>Application的生命周期就是进程的生命周期。只有进程被干掉时，Application才会销毁。哪怕是没有Activity、Service在运行，Application也会存在。所以，为了减少内存压力，尽量不要在Application里面引用大对象、Context等。</p></li><li><p>设置全屏方法有2种:1.通过代码设置，2通过manifest文件设置。用代码设置全屏时app在我们应用运行后，可能会看到短暂的状态栏，然后才全屏，而第二种方法是不会有这种情况的,所以推荐第二种。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//方法1: </span><br><span class="line">//无title   </span><br><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);    </span><br><span class="line">getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN,WindowManager.LayoutParams. FLAG_FULLSCREEN);   </span><br><span class="line">//必须在setContentView()之前调用</span><br><span class="line">setContentView(R.layout.main);  </span><br><span class="line">//方法2:</span><br><span class="line">&lt;activity android:name=&quot;.&quot; </span><br><span class="line">    android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot; //全屏主题</span><br><span class="line">    android:label=&quot;@string/app_name&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>viewpager 的 setCurrentItem 一定要在 setAdapter 方法之后调用才会有效果.</p></li><li><p>判断手机是不是飞行模式  boolean isEnabled = Settings.System.getInt(context.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0) == 1;</p></li><li><p>TabLayout 修改字体的方法<br>官方的 TabLayout 没有提供修改 TextView size 的方法，可以新建一个 style CustomTabLayoutTextAppearance 继承 TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse ，然后增加 item ，设置 android:textAllCaps 为 true ，再设置 android:textSize 为你想设置的大小。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/custom_style1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>再在 TabLayout 的布局文件里设置 app:tabTextAppearance=”@style/CustomTabLayoutTextAppearance” 即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/custom_style2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>遍历HashMap的最佳方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMap</span><span class="params">(Map mp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry m : mp.entrySet()) &#123;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">":"</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Java在一个区间内产生随机整数数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randInt</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">    Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">int</span> randomNum = rand.nextInt((max - min) + <span class="number">1</span>) + min;</span><br><span class="line">    <span class="keyword">return</span> randomNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果子类实现Serializable接口而父类未实现时，父类不会被序列化，但此时父类必须有个无参构造方法，否则会抛InvalidClassException异常。</p></li><li><p>transient关键字修饰变量可以限制序列化。</p></li><li><p>当使用JakeWharton的TabPageIndicator时，如果需要先做一些耗时的操作，然后再展示TabPageIndicator的话，需要先设置mIndirector.setVisibility(View.GONE);然后耗时任务结束以后再mIndirector.setVisibility(View.VISIBLE);否则会报错</p></li><li><p>类继承之间的调用顺序 父类static成员 -&gt; 子类static成员 -&gt; 父类普通成员初始化和初始化块 -&gt; 父类构造方法 -&gt; 子类普通成员初始化和初始化块 -&gt; 子类构造方法</p></li><li><p>华为手机无法显示log解决方案,.拨号界面输入(*#*#2846579#*#*) Service menu will appear.Go to “ProjectMenu” -&gt; “Background Setting” -&gt; “Log Setting”Open “Log switch” and set it to ON.Open “Log level setting” and set the log level you wish.</p></li><li><p>后台service经常因为重启之类的出现onStartCommand()中的Intent传递的参数为null， 通过在onStartCommand()中的返回值改成return super.onStartCommand(intent, Service.START_REDELIVER_INTENT, startId); 可以解决问题。下面介绍几个flag的意思<br></p></li><li><table><thead><tr><th>flag</th><th align="center">解释</th></tr></thead><tbody><tr><td>START_STICKY</td><td align="center">如果service进程被kill掉，保留service的状态为开始状态，但不保留递送的intent对象。随后系统会尝试重新创建service，由于服务状态为开始状态，所以创建服务后一定会调用onStartCommand(Intent,int,int)方法。如果在此期间没有任何启动命令被传递到service，那么参数Intent将为null。</td></tr><tr><td>START_NOT_STICKY</td><td align="center">“非粘性的”。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统不会自动重启该服务。</td></tr><tr><td>START_REDELIVER_INTENT</td><td align="center">重传Intent。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务，并将Intent的值传入。</td></tr><tr><td>START_STICKY_COMPATIBILITY</td><td align="center">START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</td></tr></tbody></table></li><li><p>不能在Activity没有完全显示时显示PopupWindow和Dialog</p></li><li><p>在多进程之间不要用SharedPreferences共享数据，虽然可以（MODE_MULTI_PROCESS），但极不稳定</p></li><li><p>有些时候不能使用Application的Context，不然会报错（比如启动Activity，显示Dialog等）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/context_usage.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><blockquote><p>*备注：大家注意看到有一些NO上添加了一些数字，其实这些从能力上来说是YES，但是为什么说是NO呢？下面一个一个解释：</p><ol><li>数字1：启动Activity在这些类中是可以的，但是需要创建一个新的task，一般情况不推荐；</li><li>数字2：在这些类中去layout inflate是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用；</li><li>数字3：在Receiver为null时允许，在4.2或以上的版本中，用于获取黏性广播的当前值。（可以无视）；</li><li>ContentProvider、BroadcastReceiver之所以在上述表格中，是因为在其内部方法中都有一个context用于使用。</li></ol></blockquote><ul><li><p>谨慎使用Android的透明主题，透明主题会导致很多问题，比如：如果新的Activity采用了透明主题，那么当前Activity的onStop方法不会被调用；在设置为透明主题的Activity界面按Home键时，可能会导致刷屏不干净的问题；进入主题为透明主题的界面会有明显的延时感</p></li><li><p>不要在非UI线程中初始化ViewStub，否则会返回null</p></li><li><p>尽量不要通过Application缓存数据，这不稳定</p></li><li><p>华为手机无法打开USB调试的问题，</p></li></ul><ol><li>插好数据线,拨号界面 输入 <em>#</em>#2846579#<em>#</em> 进入工程模式</li><li>projectmenu→3后台设置→4USB端口配置→Balong调试模式,点确定</li><li>不要拔线,退出工程模式,直接重启手机,电脑中显示可移动磁盘(若仍未出现,重复步骤1、2)</li><li>这个是关闭USB调试的情况下电脑中使用手机的可移动磁盘的方法，使用后下拉菜单中usb选项也回来了。</li></ol><ul><li><p>android listview中的消息被软键盘遮挡了,在设置listview的时候加上android:transcriptMode=”normal”就好了</p></li><li><p>TextUtils 是一个非常好用的工具类，把 List<string> 转成字符串，逗号分隔，逗号分隔的 String 字符串，切割成 List<string> ，分别可以用 TextUtils 的 join 和 split 方法。如果要对 List 去重，则可以用 Collection 的 frequency 方法。</string></string></p></li><li><p>在activity中调用 moveTaskToBack (boolean nonRoot)方法即可将activity 退到后台，注意不是finish()退出。</p></li><li><p>activity中的runOnUiThrea(Runnable action)方法可以直接回到主线程</p></li><li><p>listview有个footerDividersEnabled和headerDividersEnabled方法可以设置listview的顶部和底部divide，但是必须保证你设置了headview和footview才会有效果</p></li><li><p>Throwable类中的getStackTrace()方法，根据这个方法可以得到函数的逐层调用地址，其返回值为StackTraceElement[]；</p></li><li><p>StackTraceElement类，其中四个方法getClassName()，getFileName()，getLineNumber()，getMethodName()在调试程序打印Log时非常有用；</p></li><li><p>UncaughtExceptionHandler接口，再好的代码异常难免，利用此接口可以对未捕获的异常善后</p></li><li><p>Resources类中的getIdentifier(name, defType, defPackage)方法，根据资源名称获取其ID，做UI时经常用到；</p></li><li><p>view的isShown方法，只有当view本身以及它的所有祖先们都是visible时，isShown（）才返回TRUE。而平常我们调用if(view.getVisibility() == View.VISIBLE)只是对view本身而不对祖先的可见性进行判断。</p></li><li><p>Arrays类中的一系列关于数组操作的工具方法：binarySearch()，asList()，equals()，sort()，toString()，copyOfRange()等；Collections类中的一系列关于集合操作的工具方法：sort()，reverse()等；</p></li><li><p>TextView类中的append(CharSequence)方法，添加文本。一些特殊文本直接用+连接会变成String；</p></li><li><p>System类中的arraycopy(src, srcPos, dest, destPos, length)方法，用来copy数组；</p></li><li><p>Fragment类中的onHiddenChanged(boolean)方法，使用FragmentTransaction中的hide()，show()时只会调用Fragment中的show和hidden状态,其他生命周期不会调用。</p></li><li><p>Activity类中的onWindowFocusChanged(boolean)，onNewIntent(intent)等回调方法；</p></li><li><p>TextView类中的setTransformationMethod(TransformationMethod)方法，可用来实现“显示密码”功能</p></li><li><p>PageTransformer接口，用来自定义ViewPager页面切换动画，用setPageTransformer(boolean, PageTransformer)方法来进行设置；</p></li><li><p>apache提供的一系列jar包：commons-lang.jar，commons-collections.jar，commons-beanutils.jar等，里面很多方法可能是你曾经用几十几百行代码实现过的，但是执行效率或许要差很多，比如：ArrayUtils，StringUtils……；</p></li><li><p>ActivityLifecycleCallbacks接口，用于在Application类中监听各Activity的状态变化 <a href="http://mp.weixin.qq.com/s?__biz=MzA3ODkzNzM3NQ==&mid=401277907&idx=1&sn=0b2246f5178292596fc3a8295283359c#rd" target="_blank" rel="noopener">阅读地址点我</a></p></li><li><p>ActionBar.hide()/.show() 顾名思义，隐藏和显示ActionBar，可以优雅地在全屏和带Actionbar之间转换。</p></li><li><p>SystemClock.sleep() 这个方法在保证一定时间的 sleep 时很方便，通常我用来进行 debug 和模拟网络延时。</p></li><li><p>UrlQuerySanitizer——使用这个工具可以方便对 URL 进行检查。</p></li><li><p>ActivityOptions ——方便的定义两个Activity切换的动画。 使用ActivityOptionsCompat 可以很好解决旧版本的兼容问题。</p></li><li><p>getParent().requestDisallowInterceptTouchEvent(true);剥夺父view对touch事件的处理权，谁用谁知道。</p></li><li><p>HandlerThread，代替不停new Thread开子线程的重复体力写法。</p></li><li><p>IntentService,一个可以干完活后自己去死且不需要我们去管理子线程的Service</p></li><li><p>Executors. newSingleThreadExecutor();这个是java的，之前不知道它，自己花很大功夫去研究了单线程顺序执行的任务队列 </p></li><li><p>android:animateLayoutChanges=”true”，LinearLayout中添加View的动画的办法，支持通过setLayoutTransition()自定义动画。</p></li><li><p>AsyncQueryHandler，如果做系统工具类的开发，比如联系人短信辅助工具等，肯定免不了和ContentProvider打交道，如果数据量不是很大的情况下，随便搞，如果数据量大的情况下，了解下这个类是很有必要的，需要注意的是，这玩意儿吃异常..</p></li><li><p>ViewFlipper，实现多个view的切换(循环)，可自定义动画效果，且可针对单个切换指定动画。</p></li><li><p>android util包中的Pair类，可以方便的用来存储一”组”数据。注意不是key value</p></li><li><p>android:descendantFocusability，ListView的item中CheckBox等元素抢焦点导致item点击事件无法响应时，除了给对应的元素设置 focusable,更简单的是在item根布局加上android:descendantFocusability=”blocksDescendants” </p></li><li><p>includeFontPadding=”false”，TextView默认上下是有一定的padding的，有时候我们可能不需要上下这部分留白，加上它即可。</p></li><li><p>Messenger，面试的时候通常都会被问到进程间通信，一般情况下大家都是开始背书，AIDL巴拉巴拉。。有一天在鸿神的博客看到这个，嗯，如他所说，又可以装一下了。 </p></li><li><p>EditTxt.setImeOptions， 使用EditText弹出软键盘时，修改回车键的显示内容(一直很讨厌用回车键来交互，所以之前一直不知道这玩意儿) </p></li><li><p>java8中新增的LocalDate和LocalTime接口，Date虽然是个万能接口，但是它真的不好用，有了这俩，终于可以愉快的处理日期时间了。</p></li><li><p>WeakHashMap，直接使用HashMap有时候会带来内存溢出的风险，使用WaekHashMap实例化Map。当使用者不再有对象引用的时候，WeakHashMap将自动被移除对应Key值的对象。</p></li><li><p>使用SnackBar的时候，不要使用view.getRootView()作为snackbar的view,华为荣耀7 会出问题。</p></li><li><p>设置TextView单行显示的时候不要用Lines=1,而要用singleLine=”true” ,因为魅族部分手机在设置Lines=1的时候，然后TextView的值全为数字的时候， 你就会懵逼了.</p></li><li><p>TouchDelegate可用于更改View的触摸区域。场景：比如在RecyclerView的ItemView里包含了CheckBox组件, 然后想实现点击ItemView的时候，也可以触发CheckBox，就可以使用此类</p></li><li><p>ArgbEvaluator可用于计算不同颜色值之间的插值，配合ValueAnimator.ofObject或者ViewPager.PageTransformer使用，可以实现不同颜色之间的平滑过渡。</p></li><li><p>Palette可用于提取一张图片的颜色。</p></li><li><p>ViewDragHelper,做过自定义ViewGroup的童鞋都应该知道这个东西吧，用来处理触摸事件的神器，妈妈再也不用担心我自定义控件了。</p></li><li><p>PageTransformer用于定义ViewPager页面切换时的动画效果（淡入淡出，放大缩小神马的…）官方有例子，直接看吧。</p></li><li><p>Formatter.formatFileSize() 这个方法会格式化数据的大小，根据输入的字节大小，返回 B KB MB GB 等等（最大支持到 PB）。当然要注意的是输入的最大值是 Long.MAX_VALUE.</p></li><li><p>Activity.recreate重新创建Activity。有什么用呢？可以在程序更换主题后，立马刷新当前Activity，而不会有明显的重启Activity的动画。</p></li><li><p>View.getContext顾名思义，就不用解释了吧…以前在写RecyclerView的Adapter的时候，为了使用LayoutInflater，经常傻乎乎地在构造函数中传入一个外部的context….是不是只有我不知道而已（笑cry脸）</p></li><li><p>View.post方便在非UI线程对界面进行修改，与Handler的作用类似。并且由于post的Runnable会保证在该View绘制完成的前提下才调用，所以一般也可以用于获取View的宽高。</p></li><li><p>Activity.runOnUiThread与View.post类似，方便在非UI线程中对界面进行修改。</p></li><li><p>Fragment在配合PagerAdapter使用的时候可以重写setUserVisibleHintFragment()方法，然后根据参数的布尔值（true的话表示当前Fragment对用户可见),来执行一些逻辑。</p></li><li><p>android:animateLayoutChanges 这是一个非常酷炫的属性。在父布局加上 android:animateLayoutChanges=”true” 后，如果触发了layout方法（比如它的子View设置为GONE），系统就会自动帮你加上布局改变时的动画特效！！</p></li><li><p>android:clipToPadding 设置父view是否允许其子view在它的padding（这里指的是父View的padding）中绘制。是不是有点绕？举个实际场景吧：假如有个ListView，我们想要在初始位置时，第一项Item离顶部有10dp的距离，就可以在ListView的布局中加入android:clipToPadding=”false” android:paddingTop=”10dp”即可。是不是很方便呢？</p></li><li><p>rv 的 Layoutmanager 可以直接申明在 xml 中,具体代码可查看RecyclerView.createLayoutManager 方法.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/recycler_1.jpeg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/recycler_2.jpeg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>RecyclerView在23.2.+的版本中新增了自动测量的功能，由于新增了自动测量，那么它的item的根布局在需要测量的方向上就不能写match_parent了，需要改成wrap_content</p></li><li><p>getParent().requestDisallowInterceptTouchEvent(true);剥夺父view对touch事件的处理权，谁用谁知道。</p></li><li><p>Canvas中clipRect、clipPath和clipRegion剪切区域的API。</p></li><li><p>GradientDrawable 有个阴影效果还不错，以为是切的图片，一看代码，什么鬼= =！</p></li><li><p>有朋友提到了在自定义View时有些方法在开启硬件加速的时候没有效果的问题，在API16之后确实有很多方法不支持硬件加速，通常我们关闭硬件加速都是在清单文件中通过&lt;application android:hardwareAccelerated=”false” …&gt;，其实android也提供了针对特定View关闭硬件加速的方法,调用View.setLayerType(View.LAYER_TYPE_SOFTWARE, null);即可。</p></li><li><p>PointF，graphics包中的一个类，我们经常见到在处理Touch事件的时候分别定义一个downX，一个downY用来存储一个坐标，如果坐标少还好，如果要记录的坐标过多那代码就不好看了。用PointF(float x, float y);来描述一个坐标点会清楚很多。</p></li><li><p>StateListDrawable，定义Selector通常的办法都是xml文件，但是有的时候我们的图片资源可能是从服务器动态获取的，比如很多app所谓的皮肤，这种时候就只能通StateListDrawable来完成了，各种addState即可。</p></li><li><p>android:duplicateParentState=”true”，让子View跟随其Parent的状态，如pressed等。常见的使用场景是某些时候一个按钮很小，我们想要扩大其点击区域的时候通常会再给其包裹一层布局，将点击事件写到Parent上，这时候如果希望被包裹按钮的点击效果对应的Selector继续生效的话，这时候duplicateParentState就派上用场了。</p></li><li><p>ViewConfiguration.getScaledTouchSlop();触发移动事件的最小距离，自定义View处理touch事件的时候，有的时候需要判断用户是否真的存在movie，系统提供了这样的方法。</p></li><li><p>ViewStub，有的时候一块区域需要根据情况显示不同的布局，通常我们都会通过setVisibility的方法来显示和隐藏不同的布局，但是这样默认是全部加载的，用ViewStub可以更好的提升性能。</p></li><li><p>onTrimMemory，在Activity中重写此方法，会在内存紧张的时候回调（支持多个级别），便于我们主动的进行资源释放，避免OOM。</p></li><li><p>TextView.setCompoundDrawablePadding，代码设置TextView的drawable padding。</p></li><li><p>ImageSwitcher，可以用来做图片切换的一个类，类似于幻灯片。</p></li><li><p>在自定义控件的时候,能用drawable来绘制圆，或者其他样式的时候,尽量用drawable,因为drawable的效果要远胜于canvas.drawXXX().</p></li><li><p>如果想要自定义View支持SwipeRefreshLayout，只需要声明并实现ScrollingView接口即可，RecyclerView和NestedScrollView已经实现此接口。</p></li><li><p>AtomicFile——通过使用备份文件进行文件的原子化操作。这个知识点之前我也写过，不过最好还是有出一个官方的版本比较好。</p></li><li><p>DatabaseUtils——一个包含各种数据库操作的使用工具。</p></li><li><p>Activity.isChangingConfigurations ()——如果在 Activity 中 configuration 会经常改变的话，使用这个方法就可以不用手动做保存状态的工作了。</p></li><li><p>SearchRecentSuggestionsProvider——可以创建最近提示效果的 provider，是一个简单快速的方法。</p></li><li><p>android:clipChildren (ViewGroup)——如果此属性设置为不可用，那么 ViewGroup 的子 View 在绘制的时候会超出它的范围，在做动画的时候需要用到。</p></li><li><p>android:fillViewport (ScrollView)——在这片文章中有详细介绍文章链接，可以解决在 ScrollView 中当内容不足的时候填不满屏幕的问题。</p></li><li><p>android:tileMode (BitmapDrawable)——可以指定图片使用重复填充的模式。</p></li><li><p>android:enterFadeDuration/android:exitFadeDuration (Drawables)——此属性在 Drawable 具有多种状态的时候，可以定义它展示前的淡入淡出效果。</p></li><li><p>Log.wtf()的意思是What a Terrible Failure,而不是What The Fuck!</p></li><li><p>使用RenderScript虚化图片效果。如果你的app的minSDK为16或者更低，你需要使用support模式，因为很多方法都是在API 17之后添加的。renderscriptTargetApi最高到23，但是你应该把它设置到能保持脚本中使用到的功能完整的最低API。如果你想在support模式下target API 21+你必须使用gradle-plugin 2.1.0 和 buildToolsVersion “23.0.3” 或者以上。需要在gradle中添加renderscriptTargetApi 18,renderscriptSupportModeEnabled true 这两句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">blurBitmap</span><span class="params">(Context context, Bitmap src, <span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">        Bitmap dest = src.copy(src.getConfig(), <span class="keyword">true</span>);</span><br><span class="line">        RenderScript rs = RenderScript.create(context);</span><br><span class="line">        Allocation allocation = Allocation.createFromBitmap(rs, src);</span><br><span class="line">        Type t = allocation.getType();</span><br><span class="line">        Allocation blurredAllocation = Allocation.createTyped(rs, t);</span><br><span class="line">        ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));</span><br><span class="line">        blurScript.setRadius(radius);</span><br><span class="line">        blurScript.setInput(allocation);</span><br><span class="line">        blurScript.forEach(blurredAllocation);</span><br><span class="line">        blurredAllocation.copyTo(dest);</span><br><span class="line">        allocation.destroy();</span><br><span class="line">        blurredAllocation.destroy();</span><br><span class="line">        blurScript.destroy();</span><br><span class="line">        t.destroy();</span><br><span class="line">        rs.destroy();</span><br><span class="line">        <span class="keyword">return</span> dest;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想把一个view保存为Bitmap，正常情况下用第一种方法就可以了，但是如果是ScrollView，则必须采用第二种方法。 <br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/capture_view_1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/capture_view_2.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>当Activity LauncherMode 为singleTask singleInstance时,使用startActivityForResult会立马返回，不能正常调用。具体请看<a href="http://www.360doc.com/content/15/0123/14/12928831_443085580.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/15/0123/14/12928831_443085580.shtml</a></p></li><li><p>当PopupWindow中有EditText控件时,因为Popupwindow 默认没有获取到焦点，需要手动设置焦点，这样子view才能获取到事件的监听。所以你需要在创建完popwindow后设置他的焦点，popupWindow.setFocusable(true);就可以让EditText获取焦点。</p></li><li><p>PopupWindow默认点击外部的时候不消失，需要对PopupWindow 设置一个背景图popWindow.setBackgroundDrawable(new BitmapDrawable());要创建一个空对象，设置为null是不行的，或者就创建一个全透明的背景图。</p></li><li><p>android中的序列化官方推荐Parceble,其实Parceble最好用于内存之间数据的交换,如果要把数据写入硬盘的话,推荐实现Serializable</p></li><li><p>tools标签可以很好的帮助开发者实时预览xml的效果,通过tools:background可以预览控件所占的控件,tools:visibility可以把一个gone的控件在预览的时候展示出来,并且运行以后tools标签的内容不会展示出来.例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:background</span>=<span class="string">"#FF00FF"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:visibility</span>=<span class="string">"visible"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"这段话只在预览时能看到,运行以后就看不到了"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>android studio 2.1起已经支持jdk8了,使用的时候要在gradle中加上,需要把buildToolsVersion更新到24以上的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">            jackOptions &#123;</span><br><span class="line">                enabled true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   ...</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        targetCompatibility 1.8</span><br><span class="line">        sourceCompatibility 1.8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>6.0之后getResources().getColor()方法被废弃了，大家可以用ContextCompat.getColor(context, R.color.color_name)替换，ContextCompat 是 v4 包里的，请放心使用，另外还有getDrawable()等方法</p></li><li><p>图片的资源文件官方推荐只把launcher放在mipmap文件夹下面，而app用到的资源文件建议放在drawable下面。</p></li><li><p>SharedPreference.Editor的apply是异步操作，不会返回成功的状态，而commit是同步操作，因此，在多个并发的提交commit的时候，他们会等待正在处理的commit保存到磁盘后再操作下一个数据，从而降低了效率。</p></li><li><p>如果你在 manifest 中把一个 activity 设置成 android:windowSoftInputMode=”adjustResize”，那么 ScrollView（或者其它可伸缩的 ViewGroups）会缩小，从而为软键盘腾出空间。但是，如果你在 activity 的主题中设置了 android:windowFullscreen=”true”，那么 ScrollView 不会缩小。这是因为该属性强制 ScrollView 全屏显示。然而在主题中设置 android:fitsSystemWindows=”false” 也会导致 adjustResize 不起作用</p></li><li><p>在Android 4.0以后，在Manifest.xml中静态注册的广播，程序安装后必须启动一次才能接收到广播，比如你的应用监听开机启动的广播，必须要你的程序被运行过才能监听到</p></li><li><p>Activity的onDestory方法调用时机是不确定的（有时候离开界面很久之后才会调用onDestory方法），应该避免指望通过onDestory方法去释放与Activity相关的资源，否则会导致一些随机bug</p></li><li><p>2.X时代Bitmap对象虽然存储在堆内存中，但是用了一个byte数组存储其像素信息。通过计数器来记录该像素信息被引用的个数。有人认为这个byte数组在native堆中，但事实上它也在堆中。只有在使用者调用recycle()后，Bitmap对象才会释放像素信息，才会在失去引用后被垃圾回收机制销毁。再加上DVM的heap size有严格的阀值，所以在使用大量图片资源的时候，及其容易发生OOM。解决办法一般都是，用一个哈希表存储Bitmap对象的软引用，作为内存缓存，并在适当时机掉用其recycle()。3.0以上版本Bitmap对象可以通过垃圾回收机制完全销毁，理论上不用再调用recycle()。</p></li><li><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;update .gitignore&apos;</span><br></pre></td></tr></table></figure></li><li><p>时间戳请使用long或者String类型接收，遇到的坑,由于项目中的model好多都是通过GsonFormat生成的，服务器给的json中的时间戳都是10位的，导致了GsonFormat自动解析成了int, 当测试人员选择时间为2100年的时候时间戳是4开头的十位 用int类型接收越界了,导致报错</p></li><li><p>为你的app添加默认布局样式,比如:每一个控件都需要写width和height属性,然而很多的控件的宽高属性都是wrap_content,那么我们可以通过在style文件添加如下样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;Theme.YourApp&quot; parent=&quot;android:style/Theme.Light&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这样,控件的宽高默认都是wrap_content样式啦。</p><ul><li><p>在style中写的样式通过视同parent标签来扩展你的样式,这样更高效,这里官方的建议是，只有Android自带的style才用parent标签，如果是自定义的style，直接用.符号来连接就行。如Fill.Height。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;Fill&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;fill_parent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;fill_parent&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=&quot;Fill.Height&quot; &gt;</span><br><span class="line">    &lt;item name=&quot;android:orientation&quot;&gt;vertical&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>Android上的应用切换按钮列出的其实不是应用而是Task，所以你会看到有的应用在切换视图里有多个任务。如果你的应用中有逻辑上相互独立的部分，或者想在多窗口环境下并排显示应用的两个不同部分，这种情况就适合多任务了。使用manifest属性(静态)或者 intent flags(动态)可以实现这一点,详见视频: <a href="http://v.youku.com/v_show/id_XMTU2ODk4NDg2NA==.html?f=26587294" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XMTU2ODk4NDg2NA==.html?f=26587294</a></p></li></ul><p><img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/multy_task1.jpg" width="50%" height="300px"><img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/multy_task2.jpg" width="50%" height="300px"></p><ul><li><p>当app的theme用的是NoActionBar,但是在layout中仍然用到toolbar的时候,不要在style文件中加fitsSystemWindows属性,而是在用到toolbar的layout最外层加fitsSystemWindows,否则当你使用EditText,在小米手机上长按EditText调出系统粘贴功能的时候,粘贴的layout的布局会错位.</p></li><li><p>当WebView与ScrollView嵌套使用,并且WebView有字体放大缩小的功能时,当切换webview的字体后,webview的高度并不能很好的计算出来,这时候可以通过注入的方式,让js算出高度,经测试,这样是最可靠的,代码地址:<a href="http://blog.csdn.net/jys1115/article/details/43525979" target="_blank" rel="noopener">http://blog.csdn.net/jys1115/article/details/43525979</a></p></li><li><p>Context类中的createPackageContext(packageName, flags)方法，可用来获取指定包名应用程序的Context对象。</p></li><li><p>TextView类的setKeyListener(KeyListener)方法；<br>其中DigitsKeyListener类，使用getInstance(String accepted)方法即可指定EditText可输入字符集；</p></li><li><p>View类中的getLocationInWindow(int[])方法和getLocationOnScreen(int[])方法，获取View在窗口/屏幕中的位置；</p></li><li><p>Context.getCacheDir() - 可以获取到app默认的缓存路径。</p></li><li><p>StaticLayout 在自定义控件绘制文本的时候很有用。</p></li><li><p>Android中的四大组件千万不要通过new的方式创建出来。</p></li><li><p>测试app的时候,我们大都想要将debug和release版本同时安装到手机里,可以通过在gradle中修改applicationid来实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix &apos;.debug&apos;</span><br><span class="line">            versionNameSuffix &apos;-DEBUG&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            //...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在大多数的登陆界面中，都提供了用户是否让密码可见的选项，Support Library 24.2.0 提供了官方的实现，TextInputLayout 中添加了 passwordToggleEnabled 属性来开启此功能，并且可以通过 passwordToggleDrawable 设置图标。(摘自:Android笔记的微博)</p></li><li><p>同样,在Support Library 24.2.0中增加RecyclerView 在快速滚动时的回调接口,SnapHelper是官方的一个实现OnFlingListener 的 一个抽象类,LinearSnapHelper 则是一个完整的实现.LinearSnapHelper默认实现的功能是类似ViewPager,在滚动结束后,会选择列表某一条居中展示(这里有开始位置展示,或者结束位置显示<a href="https://github.com/rubensousa/RecyclerViewSnap" target="_blank" rel="noopener">点我</a>).例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false);</span><br><span class="line">recyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line">LinearSnapHelper snapHelper = new LinearSnapHelper();</span><br><span class="line">snapHelper.attachToRecyclerView(recyclerView);</span><br></pre></td></tr></table></figure></li><li><p>Android中推荐使用的数据结构 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayMap&lt;K,V&gt; in place of HashMap&lt;K,V&gt; </span><br><span class="line">ArraySet&lt;K,V&gt; in place of HashSet&lt;K,V&gt; </span><br><span class="line">SparseArray&lt;V&gt; in place of HashMap&lt;Integer,V&gt; </span><br><span class="line">SparseBooleanArray in place of HashMap&lt;Integer,Boolean&gt; </span><br><span class="line">SparseIntArray in place of HashMap&lt;Integer,Integer&gt;  </span><br><span class="line">SparseLongArray in place of HashMap&lt;Integer,Long&gt;  </span><br><span class="line">LongSparseArray&lt;V&gt; in place of HashMap&lt;Long,V&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成GUID(由于java中只能生成UUID,所以这里要转换一下):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return UUID.randomUUID().toString().toUpperCase().replaceAll(&quot;-&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure></li><li><p>业务场景：需要定时后台扫描数据库，上传本地照片至云端，定时任务采用何种模式: </p></li></ul><p>1.Handler或者Timer定时一般为秒级别的任务,Timer会启动额外线程，而Handler可以不用。<br>2.无论是Handler还是Timer都需要依赖于进程存活<br>3.利用Handler实现定时任务的类:HandlerTimer<br>4.如果时间较长，则需要使用AlarmManager<br>5.另外，我们对于这种业务应该优先考虑是否可以基于事件通知。<br>6.如果是加入媒体库的文件，我们可以使用registerContentObserver监听媒体库文件变化。</p><ul><li>把Activity作为参数传给一个静态方法,会影响这个Activity的正常销毁吗?</li></ul><p>1.内存泄露与方法是否是静态与否无关，与内部的方法体实现有关系。<br>2.内存泄露可以简单理解成：生命周期长的对象不正确持有了持有了生命周期短的对象，导致生命周期短的对象无法回收。<br>3.比如Activity实例被Application对象持有，Activity实例被静态变量持有。</p><ul><li><p>在assets文件夹下存放单个文件的大小不能超过1M，如果读取超过1M的文件会报 “Data exceeds UNCOMPRESS_DATA_MAX (1314625 vs 1048576)” 的IOException。如果一定要存储，可以分割文件，再去合并文件</p></li><li><p>在Android library中不能使用switch-case语句访问资源ID，因为case分支后面跟的参数必须是常数，而library中的每一个资源ID都没有被声明为final。</p></li><li><p>当前Activity的onPause方法执行结束后才会执行下一个Activity的onCreate方法，所以在onPause方法中不适合做耗时较长的工作，这会影响到页面之间的跳转效率；</p></li><li><p>不要通过Bundle传递大块的数据，否则会报TransactionTooLargeException异常</p></li><li><p>（AnimationDrawable在Android5.0及以上的版本已有明显的优化）尽量不要使用AnimationDrawable，它在初始化的时候就将所有图片加载到内存中，特别占内存，并且还不能释放，释放之后下次进入再次加载时会报错；</p></li><li><p>.9图不能通过tinypng压缩，不然会有问题；</p></li><li><p>genymotion模拟器快是因为它是基于x86架构的，如果你的应用中用到了so，但没有x86架构的so，只能放弃使用它；Android Studio的模拟器也一样；</p></li><li><p>使用Toast时，建议定义一个全局的Toast对象，这样可以避免连续显示Toast时不能取消上一次Toast消息的情况（如果你有连续弹出Toast的情况，避免使用Toast.makeText）；</p></li><li><p>尽量避免给window和Activity同时都设置了背景，这样会造成过渡绘制，可以通过在给Activity设置主题时，去掉windowBackground背景的方式减少一层过渡绘制，有时候为了避免进入Activity时会黑屏或者白屏（和主题有关），会在给Activity设置主题的时候给window设置背景，如果这种情况下给Activity也设置了背景，是会增加一倍内存的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowBackground&quot;&gt;@null&lt;/item&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置中更改字体为特大之类的会影响到app的字体样式，解决方法有: 1.将所有字体使用的单位换成dp，不再使用sp.这样不是很靠谱，并不是所有人都能做到。</p></li></ul><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Configuration configuration = getResources().getConfiguration();</span><br><span class="line"> configuration.fontScale = (float) 1; </span><br><span class="line"> //0.85 小, 1 标准大小, 1.15 大，1.3 超大 ，1.45 特大 </span><br><span class="line"> DisplayMetrics metrics = new DisplayMetrics();</span><br><span class="line"> getWindowManager().getDefaultDisplay().getMetrics(metrics); </span><br><span class="line"> metrics.scaledDensity = configuration.fontScale * metrics.density;</span><br><span class="line"> getBaseContext().getResources().updateConfiguration(configuration, metrics); </span><br><span class="line"> //（ps:dialog popupwindow 除外,这两种需要在控件中重新设置fontScale)</span><br></pre></td></tr></table></figure><ul><li><p>Android中新引入的替代枚举的注解有IntDef和StringDef,这里以IntDef做例子说明一下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Colors &#123;</span><br><span class="line">    @IntDef(&#123;RED, GREEN, YELLOW&#125;)</span><br><span class="line">    //声明必要的int常量,使用@IntDef修饰LightColors,参数设置为待枚举的集合</span><br><span class="line">    @Retention(RetentionPolicy.SOURCE)</span><br><span class="line">    //使用@Retention(RetentionPolicy.SOURCE)指定注解仅存在与源码中,不加入到class文件中</span><br><span class="line">    public @interface LightColors&#123;&#125;</span><br><span class="line">    //声明一个注解为LightColors</span><br><span class="line">    public static final int RED = 0;</span><br><span class="line">    public static final int GREEN = 1;</span><br><span class="line">    public static final int YELLOW = 2;</span><br><span class="line">&#125;</span><br><span class="line">//用法</span><br><span class="line">private void setColor(@Colors.LightColors int color) &#123;</span><br><span class="line">        Log.d(&quot;MainActivity&quot;, &quot;setColor color=&quot; + color);</span><br><span class="line">&#125;</span><br><span class="line">//调用的该方法的时候</span><br><span class="line">setColor(Colors.GREEN);</span><br></pre></td></tr></table></figure></li><li><p>PathInterpolatorCompat 很方便的使用它来创建各种插值曲线，举个非常简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Path path = new Path();</span><br><span class="line">path.cubicTo(0.2f, 0f, 0.1f, 1f, 0.5f, 1f);</span><br><span class="line">path.lineTo(1f, 1f);</span><br><span class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(view, View.TRANSLATION_X, 500);</span><br><span class="line">animator.setInterpolator(PathInterpolatorCompat.create(path));</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></li><li><p>检测当前网络能否访问远程服务器(国内通过ping百度来检测)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNetWorkAvailable(final Context context) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime runtime = Runtime.getRuntime();</span><br><span class="line">            Process pingProcess = runtime.exec(&quot;/system/bin/ping -c 1 www.baidu.com&quot;);</span><br><span class="line">            int exitCode = pingProcess.waitFor(); //0 代表连通，2代表不通</span><br><span class="line">            return (exitCode == 0);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>拦截系统返回键(onBackPressed())，使App不退出，而是进入后台运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public void onBackPressed() &#123;</span><br><span class="line">    moveTaskToBack(false);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>view.performClick() 自动调用 View 点击事件。通常按钮等控件只有在用户点击时才能触发其点击事件，该方法可以由某些特殊条件触发模拟用户点击行为。类似的还有 performLongClick() 方法。</p></li><li><p>Linkify.addLinks() 通过 android:autoLink 属性可以为其添加诸如 web、phone 等固定模版的超链接点击事件。但毕竟系统模版有限，而利用 Linkify.addLinks() 方法可以添加一些应用内自定义模版，比如新浪微博中的 “@XXX” 格式的超链接跳转等，都可以通过自定义正则表达式来匹配处理。</p></li><li><p>getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE) 设置安全窗口，禁用系统截屏。防止 App 中的一些界面被截屏，并显示在其他设备中造成信息泄漏。（常见手机设备系统截屏操作方式为：同时按下电源键和音量键。）</p></li><li><p>activity生命周期(<a href="https://www.bignerdranch.com/blog/android-activity-lifecycle-onStop/" target="_blank" rel="noopener">Ref Link</a>)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/activityStateDiagram.jpeg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/jiang111/awesome-android-tips/raw/master/img/complete_activity_fragment_lifecycle.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>RecyclerView 调用notifyItem()的时候会有默认的动画,可以通过调用((SimpleItemAnimator)recyclerView.getItemAnimator()).setSupportsChangeAnimations(false);来去掉默认动画.以防止出现闪屏的问题</p></li><li><p>Toolbar 使用的主题如果 parent=”ThemeOverlay.AppCompat.Light”，只要改一下 <item name="colorControlNormal">@color/white</item> 就可以使 OverflowButton 变为白色，同时点击它展开的菜单背景也可以是白的</p></li><li><p>Android View的生命周期示例图样。来自G+ +Arpit Mathur</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/jiang111/awesome-android-tips/master/img/view_lifecycle.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>当需要从资源文件中获取 html 并展示时，使用 Resource#getText() 而不是 Resource#getString()。当需要动态显示 HTML 时，使用 Html.fromHtml() <a href="http://saket.me/html-tags-textview/" target="_blank" rel="noopener">请看这里</a></p></li><li><p>JAVA中时间String转Timestamp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">DateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">format.setLenient(false);</span><br><span class="line">//要转换字符串 str_test  自定义的格式为 yyyy-mm-dd，可以改成你需要的格式</span><br><span class="line">String str_test =&quot;2011-04-24&quot;;</span><br><span class="line">Timestamp ts = new Timestamp(format.parse(str_test).getTime());</span><br><span class="line">System.out.println(ts.toString());</span><br><span class="line">&#125; catch (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当Activity 继承 FragmentActivity的时候，调用startActivityForResult方法中传递的requestCode范围应该在0-65535范围内，否则会报”Can only use lower 16 bits for requestCode”异常。</p></li><li><p>Android有一个隐藏的类可以判断文本输入框内输入的是不是表情，这个类就是 android.text.Emoji类，它的isEmoji(int codePoint)方法可以直接判断出来是不是表情。这个类是隐藏的，如果要用到则需要将它拷贝出来。</p></li><li><p>布局中不得不使用ViewGroup 多重嵌套时，不要使用LinearLayout 嵌套，改用RelativeLayout，可以有效降低嵌套数。</p></li><li><p>不能使用ScrollView 包裹ListView/GridView/ExpandableListVIew;因为这样会把ListView 的所有Item 都加载到内存中，要消耗巨大的内存和cpu 去绘制图面。</p></li><li><p>不要通过Intent 在Android 基础组件之间传递大数据（binder transaction缓存为1MB），可能导致OOM。</p></li><li><p>在Application 的业务初始化代码加入进程判断，确保只在自己需要的进程初始化。特别是后台进程减少不必要的业务初始化。</p></li><li><p>将android:allowbackup 属性设置为false，防止adb backup 导出数据。</p></li><li><p>除非min API level &gt;=17，请注意addJavascriptInterface 的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">API level&gt;=17，允许js 被调用的函数必须以@JavascriptInterface 进行注解，因此不受影响； 对于API level &lt; 17，尽量不要使用addJavascriptInterface，如果一定要用，那么：</span><br><span class="line">1) 使用https 协议加载URL，使用证书校验，防止访问的页面被篡改挂马；</span><br><span class="line">2) 对加载URL 做白名单过滤、完整性校验等防止访问的页面被篡改；</span><br><span class="line">3) 如果加载本地html,应该会HTML 内置在APK 中，以及对HTML 页面进行完整性校验。</span><br></pre></td></tr></table></figure></li><li><p>如何动态修改AlertDialog的Button样式,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//监听Dialog的setOnShowListener方法</span><br><span class="line">dialog.setOnShowListener(new DialogInterface.OnShowListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onShow(final DialogInterface dialog) &#123;</span><br><span class="line">      Button negativeButton = ((AlertDialog)dialog).getButton(DialogInterface.BUTTON_NEGATIVE);</span><br><span class="line">      Button positiveButton = ((AlertDialog)dialog).getButton(DialogInterface.BUTTON_POSITIVE);</span><br><span class="line">      negativeButton.invalidate();</span><br><span class="line">      positiveButton.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure></li><li><p>升级 RecycleView 版本到 25.1.0 及以上使用 Prefetch 功能，可<a href="https://juejin.im/entry/58a3f4f62f301e0069908d8f" target="_blank" rel="noopener">参考 RecyclerView 数据预取</a>。</p></li><li><p>如果 Item 高度是固定的话，可以使用 RecyclerView.setHasFixedSize(true); 来避免 requestLayout 浪费资源；</p></li><li><p>如果不要求动画，可以通过 ((SimpleItemAnimator) rv.getItemAnimator()).setSupportsChangeAnimations(false); 把默认动画关闭来提升效率。</p></li><li><p>通过 RecycleView.setItemViewCacheSize(size); 来加大 RecyclerView 的缓存，用空间换时间来提高滚动的流畅性。</p></li><li><p>如果多个 RecycledView 的 Adapter 是一样的，比如嵌套的 RecyclerView 中存在一样的 Adapter，可以通过设置 RecyclerView.setRecycledViewPool(pool); 来共用一个 RecycledViewPool。</p></li><li><p>对 ItemView 设置监听器，不要对每个 Item 都调用 addXxListener，应该大家公用一个 XxListener，根据 ID 来进行不同的操作，优化了对象的频繁创建带来的资源消耗。</p></li><li><p>通过 getExtraLayoutSpace 来增加 RecyclerView 预留的额外空间（显示范围之外，应该额外缓存的空间），如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new LinearLayoutManager(this) &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected int getExtraLayoutSpace(RecyclerView.State state) &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>WebView 在 API 21之后,写Cookie的时候默认禁止了跨域写cookie,需要通过代码,来设置开启跨域请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">           CookieManager.getInstance().setAcceptThirdPartyCookies(WebView, true);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用IdleHandler,替代Handler.postDelay(),IdleHandler是在我们的onResume和measure, layout, draw这么message执行结束之后， 提供了他们执行完毕的回调. <a href="https://wetest.qq.com/lab/view/352.html" target="_blank" rel="noopener">看这里</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public boolean queueIdle() &#123;</span><br><span class="line">               //TODO...</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在Multidex分包的时候,如果主dex过大, 5.0以下的机型可能会出现multidex installation failure错误,这时需要让主dex方法数小一点.,配置方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">配置正常的multiDex库之后,在主模块的gradle文件添加如下代码:</span><br><span class="line">Android&#123;</span><br><span class="line">     ...//其他代码</span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        javaMaxHeapSize &quot;4g&quot;</span><br><span class="line">        preDexLibraries = false</span><br><span class="line">        additionalParameters += &apos;--multi-dex&apos;</span><br><span class="line">        additionalParameters += &apos;--set-max-idx-number=35000&apos;//(35000可根据自己的需求更改)来适配4.0-4.4一些低端机型，因为拆分的dex太大，这些低端机型加载不了dex</span><br><span class="line">        additionalParameters += &apos;--minimal-main-dex&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:在gradle版本3.1.0之后dex编译采用D8,可能会导致这种分包不成功。将gradle的版本降到3.0.0之后，分包成功。另外也可以采用gradle3.1.0或者以上的版本，然后将项目的gradle配置为android.enableD8=false //暂时关闭 即可</p><ul><li><p>高版本android中，可以使用Application启动Activity并且不设置FLAG，但在低版本中必须要设置FLAG,所以建议大家使用application的context去startActivity的时候添加FLAG_ACTIVITY_NEW_TASK</p></li><li><p>不要滥用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</span><br></pre></td></tr></table></figure></li></ul><p>属性,切勿为app设置该属性,而仅针对具体的activity进行设置.公司有位开发为整个app设置了该属性,我们有个签名的横屏页面,其他是强制竖屏页面,有个需求是进入该竖屏页面后某些特殊原因需要自动跳转到签名页面,而跳转到横屏页面后导致整个app的所有页面生命周期全部重新走了一遍,该签名页面无限循环打开.</p><ul><li>当你在多module中使用了多个三方库,而这些三方库使用了多个版本的Recyclerview,我们可以通过exclude group: ‘com.android.support’, module: ‘recyclerview-v7’ 来实现使用项目中的版本,但是这样造成的问题是每添加一个库就得写一下exclude,这样很不友好,而gradle为我们提供了依赖替换规则.<br>如下代码实现了全局替换recyclerview的版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class="line">        def requested = details.requested</span><br><span class="line">        if (requested.group == &apos;com.android.support&apos;) &#123;</span><br><span class="line">            if (requested.name.startsWith(&quot;recyclerview-v7&quot;)) &#123;</span><br><span class="line">                details.useVersion &quot;28.0.0&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当然,依赖替换规则还允许我们在本地库和远程库之间进行切换.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.dependencySubstitution &#123;</span><br><span class="line">        if (useLocal) &#123; //如果使用本地仓库,系统将会把org.utils:api依赖替换为本地api的project</span><br><span class="line">            substitute module(&quot;org.utils:api&quot;) because &quot;we work with the unreleased development version&quot; with project(&quot;:api&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="摘自如下地址"><a href="#摘自如下地址" class="headerlink" title="摘自如下地址"></a>摘自<a href="https://github.com/jiang111/awesome-android-tips/blob/master/README.md" target="_blank" rel="noopener">如下地址</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="github" scheme="http://zhangyongfa888.site/categories/github/"/>
    
    
      <category term="Android" scheme="http://zhangyongfa888.site/tags/Android/"/>
    
  </entry>
  
</feed>
